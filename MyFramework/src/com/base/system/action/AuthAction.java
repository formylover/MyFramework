package com.base.system.action;import java.io.File;import java.net.URISyntaxException;import java.net.URL;import project.jun.was.HoModel;import project.jun.was.parameter.HoParameter;import project.jun.was.servlet.HoServlet;import com.base.system.delegate.AuthDelegate;public class AuthAction extends ProjectAction {	/*	 * [메뉴 관리] 메뉴 목록을 조회 / 메뉴 상세 정보 / 메뉴별 기능을 조회	 * 	 * @return case1 : ModelAndView - 파일 다운로드 또는 Excel 다운로드시 case2 :	 * HoMessage,String, String[] / HoException,SQLException - 처리결과 메시지 출력 화면 이동	 * case3 : null 화면 View(jsp) 표시	 */	@Override	public Object execute(String actionFlag, HoModel model, HoParameter parameter, HoServlet   hoServlet) throws Exception {		this.setMessagePage("/jsp/common/message/ajax.jsp");		this.setExceptionPage("/jsp/common/message/ajax.jsp");				String outline = "COMPONENT";		/*		String cls = this.getClass().getName().replace(".", "/") + ".class";				URL url = this.getClass().getClassLoader().getResource( cls );				URL urlSql = this.getClass().getClassLoader().getResource( "/com/base/system/sql/Auth.xml" );				File file = null;		File fileSql = null;	    try {	        file = new File(url.toURI());	        fileSql  = new File(urlSql.toURI());	    } catch (URISyntaxException e) {	        file = new File(url.getPath());	    } finally {	    	if( file == null ) {				System.out.println("-->> null");	    	} else {				System.out.println("-->>" + file.getAbsolutePath());				System.out.println("-->>" + new java.util.Date(file.lastModified()).toString());					    	}	    		    	if( fileSql == null ) {				System.out.println("-->> null");	    	} else {				System.out.println("-->>" + fileSql.getAbsolutePath());				System.out.println("-->>" + new java.util.Date(fileSql.lastModified()).toString());					    	}        	    }		*/		if(actionFlag.equals("all_in_one")) {			this.setForwardPage( this.getHoConfig().getOutlineMap().get("ALL_IN_ONE") );			this.setIncludePage( "/system/auth.do?p_action_flag=v_main" );		} // 권한관리 호출		else  if(actionFlag.equals("v_main") ) {			this.setForwardPage( this.getDefaultPageInfo().replaceAll("#p_action_flag#", actionFlag) );		} 		// 권한 관리 main화면 구성 { (권한list + detail) + 메뉴treelist }		else if(actionFlag.equals("v_auth_menu") ) {			this.setForwardPage( this.getHoConfig().getOutlineMap().get(outline));		} 		// 권한 별 메뉴 전체 조회		else if(actionFlag.equals("v_treelist_auth") ) {			this.setForwardPage( this.getHoConfig().getOutlineMap().get(outline));		} 		// 권한 목록을 리스트 형태로 조회.		else if(actionFlag.equals("r_auth_list") ) {			AuthDelegate delegate = (AuthDelegate) super.getHoDelegate();				delegate.authList(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_JSON") );		} 		// 권한 정보를 조회		else if(actionFlag.equals("r_auth_detail") ) {			AuthDelegate delegate = (AuthDelegate) super.getHoDelegate();			delegate.detail(actionFlag, model, parameter, parameter.getHoConfig());						this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_JSON_DETAIL") );		} 		// 권한별 메뉴 정보를 Tree로 조회		else if(actionFlag.equals("r_auth_treelist") ) {			AuthDelegate delegate = (AuthDelegate) super.getHoDelegate();			delegate.authMenuTreeList(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_TREE") ); // DATA_JSON_TREE		} 		// 권한별 권한부여자를 조회		else if(actionFlag.equals("r_auth_memberlist") ) {			AuthDelegate delegate = (AuthDelegate) super.getHoDelegate();			delegate.authMemberList(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_JSON") ); // DATA_JSON_TREE		} 		// 권한 정보를 저장		else if(actionFlag.equals("b_merge_auth_info") ) {			AuthDelegate delegate = (AuthDelegate) super.getHoDelegate();			Object result = delegate.mergeAuthInfo(actionFlag, model, parameter, parameter.getHoConfig());						return result;		} 		// 권한 정보를 삭제		else if(actionFlag.equals("b_delete_auth_info") ) {			AuthDelegate delegate = (AuthDelegate) super.getHoDelegate();			Object result = delegate.deleteAuthInfo(actionFlag, model, parameter, parameter.getHoConfig());						return result;		}		// 권한별 메뉴 권한을 저장		else if(actionFlag.equals("b_merge_auth_menu") ) {			AuthDelegate delegate = (AuthDelegate) super.getHoDelegate();			Object result = delegate.mergeAuthMenu(actionFlag, model, parameter, parameter.getHoConfig());						return result;		} 		else {			parameter.infoParameter(false);			parameter.infoParameterValue(false);		}		return null;	}}