package com.base.system.action;import project.jun.was.HoModel;import project.jun.was.result.message.HoMessage;import project.jun.was.servlet.HoServlet;import project.jun.was.parameter.HoParameter;import com.base.system.delegate.MenuDelegate;import com.base.system.action.ProjectAction;public class MenuAction extends ProjectAction {	/*	 * [메뉴 관리]	 * 메뉴 목록을 조회 / 메뉴 상세 정보 / 메뉴별 기능을 조회     * @return      * 	case1 : ModelAndView - 파일 다운로드 또는 Excel 다운로드시     * 	case2 : HoMessage,String, String[] / HoException,SQLException  - 처리결과 메시지 출력 화면 이동     * 	case3 : null 화면 View(jsp) 표시	 */	@Override	public Object execute(String actionFlag, HoModel model, HoParameter parameter, HoServlet   hoServlet) throws Exception {		this.setMessagePage("/jsp/common/message/ajax.jsp");		this.setExceptionPage("/jsp/common/message/ajax.jsp");				String outline = "COMPONENT";		if(actionFlag.equals("all_in_one") ) {			this.setForwardPage( this.getHoConfig().getOutlineMap().get("ALL_IN_ONE") );			this.setIncludePage( "/system/menu.do?p_action_flag=v_main" );		} // 메뉴관리 호출		else  if(actionFlag.equals("v_main") ) {			this.setForwardPage( this.getDefaultPageInfo().replaceAll("#p_action_flag#", actionFlag) );		} 		// 메뉴 관리 main화면 구성(treelist + (detail + list)		else if(actionFlag.equals("v_treelist_detail") ) {			this.setForwardPage( this.getHoConfig().getOutlineMap().get(outline));		} 		// 메뉴 목록을 tree형태로 조회.		else if(actionFlag.equals("r_treelist") ) {			MenuDelegate delegate = (MenuDelegate) super.getHoDelegate();			delegate.treelist(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_TREE") ); // DATA_JSON_TREE		} 		// 메뉴 상세 정보를 조회		else if(actionFlag.equals("r_detail") ) {			MenuDelegate delegate = (MenuDelegate) super.getHoDelegate();			delegate.detail(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_JSON_DETAIL") );		} 		// 메뉴의 기능을 조회		else if(actionFlag.equals("r_method_list") ) {			MenuDelegate delegate = (MenuDelegate) super.getHoDelegate();			delegate.methodList(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_JSON") );		} 		// 메뉴의 상세 정보를 저장		else if(actionFlag.equals("b_mergeInfo") ) {			MenuDelegate delegate = (MenuDelegate) super.getHoDelegate();			Object result = delegate.mergeInfo(actionFlag, model, parameter, parameter.getHoConfig());						return result;		} 				// 세부 기능 목록 저장		else if(actionFlag.equals("b_mergeList") ) {			MenuDelegate delegate = (MenuDelegate) super.getHoDelegate();			Object result = delegate.mergeList(actionFlag, model, parameter, parameter.getHoConfig());						return result;		} 						// 해당메뉴의 개발 진도 정보를 조회. (TODO PMS로 이동)		else if(actionFlag.equals("r_detail_pms") ) {			MenuDelegate delegate = (MenuDelegate) super.getHoDelegate();			delegate.detailPms(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_JSON_DETAIL") );		} 		// 버튼에 대한 상태 조회.		else if(actionFlag.equals("r_btn_status") ) {			MenuDelegate delegate = (MenuDelegate) super.getHoDelegate();			delegate.validateButton(actionFlag, model, parameter, parameter.getHoConfig());			this.setForwardPage( (String) this.getHoConfig().getOutlineMap().get("DATA_JSON_DETAIL") );			// this.setForwardPage(  "/jsp/common/data/Button.r_btn_status.jsp");		} 		else {			parameter.infoParameter(false);			parameter.infoParameterValue(false);		}		return null;	}}