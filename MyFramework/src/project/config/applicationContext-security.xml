<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context containing authentication, channel
  - security and web URI beans.
  -
  - Only used by "filter" artifact.
  -
  -->

<beans 	xmlns="http://www.springframework.org/schema/beans"
		xmlns:security="http://www.springframework.org/schema/security"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:util="http://www.springframework.org/schema/util"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
							http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
							http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<import resource="./applicationContext-db.xml"/>
	<import resource="./applicationContext-dao.xml"/>
	<import resource="./applicationContext-aop.xml"/>
	<import resource="./ActionServlet-my.xml"/>

	<bean id="hoAuthorityRules" class="project.jun.delegate.HoAuthorityRules">
		<property name="hoDaoMap">
			<map>
				<entry key="ProjectDao"><ref bean="proxyProjectDao"/></entry>
				<!-- entry key="ProjectDaoBatch"><ref bean="proxyProjectDaoBatch"/></entry -->
				<entry key="DbDao"><ref bean="proxyDbDao"/></entry>
			</map>
		</property>
		<property name="hoConfigDao">
			<ref bean="configDao"/>
		</property>
		<property name="hoConfig">
			<ref bean="config"/>
		</property>
		<!--  사용자 정보 조회 -->
		<property name="queryUserInfo" value="Login.selectUserInfo" />
		<!--  권한 정보 조회 -->
		<property name="queryDataAuth" value="Login.selectDataAuth" />
	</bean>

	<!--  Session Test.2  -->
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	<bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="expiredUrl" value="/system/login.do?p_action_flag=logouted" />
	</bean>
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />
	
	<!--  Session Test.1  
	<bean id="pwdFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="sessionAuthenticationStrategy" ref="sas" />
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>
	-->
	<bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<property name="maximumSessions" value="2" />
	</bean>

	<security:http pattern="/**/*.js" security="none"/>
	<security:http pattern="/**/*.css" security="none"/>
	        	
	<security:http use-expressions="true"  create-session="ifRequired" > <!--  access-denied-page="/system/login.do?p_action_flag=denied" is moved to accessDeniedHandler -->
		<!-- security:intercept-url pattern="/system/login.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/**" access="ROLE_USER" / -->

		<security:anonymous granted-authority="ANONYMOUS" />

		<security:custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="filterSecurityInterceptor"/>
		<!--  Session Test.2  -->
		<security:custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
		<security:custom-filter before="SESSION_MANAGEMENT_FILTER" ref="securityContextPersistenceFilter" />
		<!-- Session Test.1 security:custom-filter before="FORM_LOGIN_FILTER" ref="pwdFilter" />
		<security:session-management session-authentication-strategy-ref="sas"/ -->

		<security:form-login login-page="/system/login.do?p_action_flag=input"
				authentication-failure-url="/system/login.do?p_action_flag=fail"
				default-target-url="/system/dataBase.do?p_action_flag=db"
				always-use-default-target="true" />
		<security:logout logout-success-url="/system/login.do?p_action_flag=logouted" invalidate-session="true" delete-cookies="JSESSIONID"/>
		<security:anonymous />

		<security:session-management invalid-session-url="/system/login.do?p_action_flag=timeout" session-fixation-protection="migrateSession" > <!--  session-authentication-strategy-ref="sas" -->
			<!--  session-authentication-strategy-ref="sas"를 사용할 경우 동시상용 안됨.. -->
			<!-- security:concurrency-control max-sessions="2" error-if-maximum-exceeded="true"/ -->
		</security:session-management>

		<security:access-denied-handler ref="accessDeniedHandler"/>

		<!-- security:remember-me / -->
	</security:http>

	
	<bean id="accessDeniedHandler" class="project.jun.was.security.HoAccessDeniedHandler">
		<property name="errorPage" value="/system/login.do?p_action_flag=denied"/>
	</bean>
	
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider  user-service-ref="hoAuthorityRules">
			<security:password-encoder hash="sha-256" />
		</security:authentication-provider>
	</security:authentication-manager>

	


	
	<!--  bean id="securityRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />
	<bean id="hoLog4jMDCUserFilter" class="project.jun.was.filter.HoLog4jMDCUserFilter" />	
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />
	<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
	  <security:filter-chain-map path-type="ant" >	    
	     <security:filter-chain pattern="/**" filters="securityContextPersistenceFilter,hoLog4jMDCUserFilter,securityRequestFilter" />
	  </security:filter-chain-map>
	</bean -->
	
		
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager"  ref="authenticationManager" />
		<property name="accessDecisionManager"  ref="accessDecisionManager" />
		<property name="securityMetadataSource" ref="databaseSecurityMetadataSource" />
	</bean>


	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased"><!-- True condition -> Affirmative : 1 or more true Unanimous : all true, Consensus : true >= false -->
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.access.vote.RoleVoter">
					<property name="rolePrefix" value="ROLE_" /><!-- default -->
				</bean>
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</property>
    </bean>

	<bean id="datasecurityInitMap" class="project.jun.was.security.HoReloadableRolesUrlFactoryBean" init-method="init">
		<property name="hoAuthorityRules" ref="hoAuthorityRules"/>
	</bean>

	<!--  권한관리 초기값 TODO 실제적용시  초기값 변경 필요.. -> 초기값 DB조회로 변경 
	<util:map id="datasecurityInitMap" map-class="java.util.LinkedHashMap">
		<entry>
			<key>
				<bean class="org.springframework.security.web.util.AntPathRequestMatcher">
					<constructor-arg value="/static/**"/>
				</bean>
			</key>
			<list>
				<bean class="org.springframework.security.access.SecurityConfig">
					<constructor-arg value="IS_AUTHENTICATED_ANONYMOUSLY"/>
				</bean>
			</list>
		</entry>
		<entry>
			<key>
				<bean class="org.springframework.security.web.util.AntPathRequestMatcher">
					<constructor-arg value="/system/login.do"/>
				</bean>
			</key>
			<list>
				<bean class="org.springframework.security.access.SecurityConfig">
					<constructor-arg value="IS_AUTHENTICATED_ANONYMOUSLY"/>
				</bean>
			</list>
		</entry>
		<entry>
			<key>
				<bean class="org.springframework.security.web.util.AntPathRequestMatcher">
					<constructor-arg value="/example/example.do"/>
				</bean>
			</key>
			<list>
				<bean class="org.springframework.security.access.SecurityConfig">
					<constructor-arg value="ROLE_USER"/>
				</bean>
			</list>
		</entry>
		<entry>
			<key>
				<bean class="org.springframework.security.web.util.AntPathRequestMatcher">
					<constructor-arg value="/**"/>
				</bean>
			</key>
			<list>
				<bean class="org.springframework.security.access.SecurityConfig">
					<constructor-arg value="IS_AUTHENTICATED_ANONYMOUSLY"/>
				</bean>
			</list>
		</entry>
		<entry>
			<key>
				<bean class="org.springframework.security.web.util.AntPathRequestMatcher">
					<constructor-arg value="/**/*.todo"/>
				</bean>
			</key>
			<list>
				<bean class="org.springframework.security.access.SecurityConfig">
					<constructor-arg value="ROLE_USER"/>
				</bean>
			</list>
		</entry>
	</util:map-->

	<!-- LoginDelegate.getRolesAndUrl() 에서 권한 설정.. -->
	<bean id="databaseSecurityMetadataSource" class="project.jun.was.security.HoReloadableFilterInvocationSecurityMetadataSource">
		<constructor-arg><ref bean="datasecurityInitMap"/></constructor-arg>
		<property name="hoAuthorityRules" ref="hoAuthorityRules"/>
	</bean>
	
	<!--  method -->
	<security:global-method-security pre-post-annotations="enabled" metadata-source-ref="delegatingMethodSecurityMetadataSource">
	</security:global-method-security>
	
	<!--  applicationContext-tx.xml에서 사용 -->
	<bean id="methodSecurityMetadataSourceAdvisor" class="org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor">
		<constructor-arg value="methodSecurityInterceptor" />
		<constructor-arg ref="delegatingMethodSecurityMetadataSource" />
		<constructor-arg value="delegatingMethodSecurityMetadataSource" />
	</bean>

	<bean id="methodSecurityInterceptor" class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
		<property name="validateConfigAttributes" value="false" />
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="accessDecisionManager" ref="accessDecisionManager"/>
		<property name="securityMetadataSource" ref="delegatingMethodSecurityMetadataSource"/>
	</bean>

    <bean id="delegatingMethodSecurityMetadataSource" class="project.jun.was.security.HoReloadableDelegatingMethodSecurityMetadataSource">
        <constructor-arg>
			<list>
				<ref bean="methodSecurityMetadataSources"/>
				<bean class="org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource" />
				<bean class="org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource" />
			</list>
        </constructor-arg>
    </bean>
    

    <bean id="methodSecurityMetadataSources" class="project.jun.was.security.HoReloadableMapBasedMethodSecurityMetadataSource">
    	<constructor-arg>
	    	<map>
				<entry key="com.base.system.delegate.DataBaseDelegate.join">
					<list value-type="org.springframework.security.access.SecurityConfig">
						<value>ROLE_ADMIN1</value>
						<value>ROLE_ADMIN2</value>
						<value>ROLE_ADMIN3</value>
					</list>
				</entry>
			</map>
		</constructor-arg>
		<property name="hoAuthorityRules" ref="hoAuthorityRules"/>
    </bean>
       
	<bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

</beans>
