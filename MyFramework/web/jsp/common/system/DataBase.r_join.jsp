<%@ page language="java" contentType="text/html;  charset=utf-8" pageEncoding="utf-8" session="true"%><%@ page	import="java.util.*"	import="project.jun.dao.result.HoList"	import="project.jun.dao.result.transfigure.HoMapHasList"	import="project.jun.util.HoUtil"	import="project.jun.util.HoValidator"%><%@include file="/jsp/common/include/include.jsp"%><%HoList ColumnList = model.getHoList("ds_ColumnList");HoList JoinColumnList = model.getHoList("ds_JoinColumnList");HoList SubQueryColumnList = model.getHoList("ds_SubQueryColumnList");HoList JoinTable = model.getHoList("ds_JoinTable");%><span>	<%= makeSelectClause( ColumnList, SubQueryColumnList,  JoinColumnList,  JoinTable,  param.get("param_type"),  param.get("opt_sub"), param.get("opt_sub_select"),  param.get("cs"), param.get("cil"), param.get("cp")) %>	<%= makeFromClause( SubQueryColumnList,  JoinColumnList,  JoinTable,  param.get("param_type"),  param.get("cf")) %>	<%= makeWhereClause( ColumnList, SubQueryColumnList,  JoinColumnList,  JoinTable,  param.get("param_type"),  param.get("opt_join"),  param.get("opt_join_where"),  param.get("cw"), param.get("vo"), param.get("condition"), param.get("condition_each")) %><%!	private String makeSelectClause(HoList ColumnList,HoList SubQueryColumnList, HoList JoinColumnList, HoList JoinTable,  String param_type, String opt_sub, String opt_sub_select, String cs, String  cil, String  cp) {		StringBuffer sb = new StringBuffer();		int newLine = 0;		if( HoValidator.isNotEmpty(cil) && HoValidator.isNumber(cil)) {			newLine = Integer.parseInt(cil);		}		sb.append("---- select").append("List").append("\r\n");		sb.append("--  \r\n");		sb.append("SELECT ");		for(int i=0,j=1; ColumnList!=null && i<ColumnList.size(); i++,j++ ) {			if( i!=0 ) {				if( newLine <= 1) {					sb.append("\r\n");				} else {					if( newLine > 1 && j%newLine != 0 &&							(HoValidator.isNotEmpty(ColumnList.getString(i, "CODE"))								||(ColumnList.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && ColumnList.getInt(i, "DATA_LENGTH") == 8)								||(ColumnList.getString(i, "DATA_TYPE").equals("DATE")))) {						sb.append("\r\n");						j=newLine;					} else if(j%newLine == 0) {						sb.append("\r\n");					}				}				if( newLine <=1 ) {					sb.append(HoUtil.lPad(",", 7, " "));				} else {					if( newLine!=0 && j%newLine == 0 ) {						sb.append(HoUtil.lPad(",", 7, " "));					} else {						sb.append(" ,");					}				}			}			sb.append(HoUtil.rPad(ColumnList.getString(i, "T_COLUMN_NAME"),ColumnList.getInt(i, "A_COLUMN_MAX")+2, " "));			if( cs.equals("Y") ) {				if( cp.equals("Y")) {					sb.append("/* ").append(HoUtil.rPad(ColumnList.getString(i, "COLUMN_COMMENTS_O"),ColumnList.getInt(i, "COMMENTS_MAX")*2, " ")).append(" */");				} else {					sb.append(ColumnList.getString(i, "COLUMN_COMMENTS"));				}			}			if( HoValidator.isNotEmpty(ColumnList.getString(i, "SUB_QUERY"))) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				sb.append(ColumnList.getString(i, "SUB_QUERY").replaceAll("\\$AS\\$", ColumnList.getString(i, "TABLE_ALIAS")));				sb.append(" AS ").append(ColumnList.getString(i, "COLUMN_NAME")).append("_NM");				j=newLine-1;			} else if( HoValidator.isNotEmpty(ColumnList.getString(i, "CODE"))) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				if( param_type.startsWith("P")) {					sb.append("F_CODE_NAME(:CCOMP, ").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(", :CLANG)");				} else {					sb.append("F_CODE_NAME('0001', ").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(", 'ko')");				}				sb.append(" AS ").append(ColumnList.getString(i, "COLUMN_NAME")).append("_NM");				j=newLine-1;			}  else if( ColumnList.getString(i, "DATA_TYPE").indexOf("CHAR") >= 0 && ColumnList.getInt(i, "DATA_LENGTH") == 8  ) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				sb.append("F_DATE_CHAR(").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(")");				sb.append(" AS ").append(ColumnList.getString(i, "COLUMN_NAME")).append("_FMT");				j=newLine-1;			} else if( ColumnList.getString(i, "DATA_TYPE").equals("DATE")   ) {				if( newLine <=1 ) {					sb.append("\r\n").append(HoUtil.lPad(",", 7, " "));				} else {					sb.append(" ,");				}				sb.append("F_DATE_DATE(").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(")");				sb.append(" AS ").append(ColumnList.getString(i, "COLUMN_NAME")).append("_FMT");				j=newLine-1;			}		}		sb.append("\r\n");		if ( SubQueryColumnList != null ) {			HoMapHasList subList = SubQueryColumnList.toHoMapHasList("N_TABLE_NAME");			HoList list = null;			Set keySet = subList.keySet();			String key = null;			Iterator iter = keySet.iterator();			while( iter.hasNext()) {				key = (String) iter.next();				list = subList.getHoList(key);				if( opt_sub_select.equals("NONE") || opt_sub_select.equals("")) {					sb.append(HoUtil.lPad(",(SELECT ", 15, " ")).append("\r\n");				} else if( opt_sub_select.equals("COUNT")) {					sb.append(HoUtil.lPad(",(SELECT", 15, " ")).append(" COUNT(*)").append("\r\n");				} else if( opt_sub_select.startsWith("SUB_")) {					sb.append(HoUtil.lPad(",(SELECT ", 15, " "));					for(int i=0, j=0; i<list.size(); i++ ) {						if( opt_sub_select.equals("SUB_ALL")) {							if( j!= 0 ) {								sb.append(HoUtil.lPad(",", 15, " "));							}							sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "T_COLUMN_MAX")+2, " "));							if( cs.equals("Y") ) {								sb.append(list.getString(i, "COLUMN_COMMENTS"));							}							sb.append("\r\n");							j++;						} else if( opt_sub_select.equals("SUB_PK")) {							if( HoValidator.isNotEmpty(list.getString(i, "J_COLUMN_NAME")) && HoValidator.isNotEmpty(list.getString(i, "PK_IDX"))) {								if( j!= 0 ) {									sb.append(HoUtil.lPad(",", 15, " "));								}								sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "T_COLUMN_MAX")+2, " "));								if( cs.equals("Y") ) {									sb.append(list.getString(i, "COLUMN_COMMENTS"));								}								sb.append("\r\n");j++;							}						}					}				}				sb.append(HoUtil.lPad(" FROM ", 15, " ")).append(list.getString(0, "N_TABLE_NAME")).append(" /* ").append(list.getString(0, "N_TABLE_COMMENTS")).append(" */ \r\n");				for(int i=0,j=0; i<list.size(); i++ ) {					if( opt_sub.startsWith("ALL")							|| (opt_sub.startsWith("PK") && HoValidator.isNotEmpty(list.getString(i, "PK_IDX")) && HoValidator.isNotEmpty(list.getString(i, "J_COLUMN_NAME")))							|| (opt_sub.startsWith("EQUAL") && HoValidator.isNotEmpty(list.getString(i, "J_COLUMN_NAME")))) {						if( j == 0 ) {							sb.append(HoUtil.lPad("  WHERE ", 15, " "));						} else {							sb.append("\r\n");							sb.append(HoUtil.lPad("    AND ", 15, " "));						}						sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),opt_sub.startsWith("PK") ? list.getInt(i, "COLUMN_MAX") : list.getInt(i, "T_COLUMN_MAX"), " ")).append(" = ").append(list.getString(i, "J_COLUMN_NAME"));						j++;					} else if( opt_sub.startsWith("NO_REGI")  ) {						HashSet regiSet = new HashSet();						regiSet.add("REGI_NO");						regiSet.add("REGI_DT");						regiSet.add("MODI_NO");						regiSet.add("MODI_DT");						if( !regiSet.contains(list.getString(i, "COLUMN_NAME"))&& HoValidator.isNotEmpty(list.getString(i, "J_COLUMN_NAME"))) {							if( j == 0 ) {								sb.append(HoUtil.lPad("  WHERE ", 14, " "));							} else {								sb.append("\r\n");								sb.append(HoUtil.lPad("    AND ", 14, " "));							}							sb.append(HoUtil.rPad(list.getString(i, "COLUMN_NAME"),list.getInt(i, "T_COLUMN_MAX")+2, " ")).append(" = ").append(list.getString(i, "J_COLUMN_NAME"));							j++;						}					}					if(i==list.size()-1) {						sb.append(" ) AS ").append(list.getString(0, "N_TABLE_NAME")).append(opt_sub_select.equals("COUNT") ? "_CNT" : "").append("\r\n");					}				}			}		}		return HoUtil.escapeForHtml(sb.toString());	}	private String makeFromClause(HoList SubQueryColumnList, HoList JoinColumnList, HoList JoinTable,  String param_type, String cf) {		StringBuffer sb = new StringBuffer();		sb.append("  FROM ");		for(int i=0; JoinTable!=null && i<JoinTable.size(); i++ ) {			if( i!=0 ) {				sb.append(HoUtil.lPad(",", 7, " "));			}			sb.append(HoUtil.rPad(JoinTable.getString(i, "TABLE_NAME"),JoinTable.getInt(i, "TABLE_MAX")+2, " ")).append(" ").append(HoUtil.rPad(JoinTable.getString(i, "TABLE_ALIAS"),JoinTable.getInt(i, "ALIAS_MAX")+2, " "));			if( cf.equals("Y")) {				sb.append(JoinTable.getString(i, "TABLE_COMMENTS"));			}			sb.append("\r\n");		}		return HoUtil.escapeForHtml(sb.toString());	}	private String makeWhereClause(HoList ColumnList, HoList SubQueryColumnList, HoList JoinColumnList, HoList JoinTable,  String param_type, String opt_join, String opt_join_where, String cw,String vo, String condition, String condition_each) {		StringBuffer sb = new StringBuffer();		sb.append(" WHERE 1 = 1 ").append("\r\n");		if( opt_join.startsWith("NO_REGI")  ) {			HashSet regiSet = new HashSet();			regiSet.add("REGI_NO");			regiSet.add("REGI_DT");			regiSet.add("MODI_NO");			regiSet.add("MODI_DT");			for(int i=0; JoinColumnList!=null &&  i<JoinColumnList.size(); i++ ) {				if( !regiSet.contains(JoinColumnList.getString(i, "COLUMN_NAME"))&& HoValidator.isNotEmpty(JoinColumnList.getString(i, "J_COLUMN_NAME"))) {					sb.append("   AND ").append(HoUtil.rPad(JoinColumnList.getString(i, "T_COLUMN_NAME"),JoinColumnList.getInt(i, "A_COLUMN_MAX"), " "));					sb.append(JoinColumnList.getString(i, "LEFT_TABLE_OUTER")).append(" = ");					sb.append(HoUtil.rPad(JoinColumnList.getString(i, "J_COLUMN_NAME"),JoinColumnList.getInt(i, "A_COLUMN_MAX"), " ")).append(JoinColumnList.getString(i, "RIGHT_TABLE_OUTER"));					if(cw.equals("Y")) {						sb.append(JoinColumnList.getString(i, "COLUMN_COMMENTS"));					}					sb.append("\r\n");				}			}		} else {			for(int i=0;JoinColumnList!=null && i<JoinColumnList.size(); i++ ) {				if( opt_join.equals("ALL")						|| (opt_join.equals("PK") && HoValidator.isNotEmpty(JoinColumnList.getString(i, "PK_IDX")) && HoValidator.isNotEmpty(JoinColumnList.getString(i, "J_COLUMN_NAME")))						|| (opt_join.equals("EQUAL") && HoValidator.isNotEmpty(JoinColumnList.getString(i, "J_COLUMN_NAME")))) {					sb.append("   AND ").append(HoUtil.rPad(JoinColumnList.getString(i, "T_COLUMN_NAME"),JoinColumnList.getInt(i, "A_COLUMN_MAX"), " "));					sb.append(JoinColumnList.getString(i, "LEFT_TABLE_OUTER")).append(" = ");					sb.append(HoUtil.rPad(JoinColumnList.getString(i, "J_COLUMN_NAME"),JoinColumnList.getInt(i, "A_COLUMN_MAX"), " ")).append(JoinColumnList.getString(i, "RIGHT_TABLE_OUTER"));					if(cw.equals("Y")) {						sb.append(JoinColumnList.getString(i, "COLUMN_COMMENTS"));					}					sb.append("\r\n");				}			}		}		if( opt_join_where.startsWith("NO_REGI")  ) {			HashSet regiSet = new HashSet();			regiSet.add("REGI_NO");			regiSet.add("REGI_DT");			regiSet.add("MODI_NO");			regiSet.add("MODI_DT");			for(int i=0; JoinColumnList!=null && i<JoinColumnList.size(); i++ ) {				if( !regiSet.contains(JoinColumnList.getString(i, "COLUMN_NAME"))) {					sb.append("   AND ").append(HoUtil.rPad(JoinColumnList.getString(i, "T_COLUMN_NAME"),JoinColumnList.getInt(i, "A_COLUMN_MAX"), " "));					if( param_type.equals("M")) {						sb.append(" = ''");					} else if( param_type.equals("P")) {						sb.append(" = :P");					} else if( param_type.equals("I")) {						sb.append(" = #").append(JoinColumnList.getString(i, "COLUMN_NAME")).append("#");					} else {						sb.append(" = ''");					}					if(cw.equals("Y")) {						sb.append("  ").append(JoinColumnList.getString(i, "COLUMN_COMMENTS"));					}					sb.append("\r\n");				}			}		} else {			for(int i=0,j=0; ColumnList!=null && i<ColumnList.size(); i++ ) {				if( opt_join_where.equals("ALL")						|| (opt_join.equals("PK") && HoValidator.isNotEmpty(ColumnList.getString(i, "PK_IDX")))) {					// 조건식 들어가는 부분..					if( param_type.equals("I")) {						if( "IF".equals(condition)) {							if( "Y".equals(vo) ) {								sb.append("   <if test=\"").append(HoUtil.toCamel(ColumnList.getString(i, "COLUMN_NAME"))).append(" != ''\">").append("\r\n");							} else {								sb.append("   <if test=\"").append(ColumnList.getString(i, "COLUMN_NAME")).append(" != ''\">").append("\r\n");							}						} 					} else if( param_type.equals("My")) {						if( "IF".equals(condition)) {							if( "Y".equals(vo) ) {								sb.append("   <if test=\"").append(HoUtil.toCamel(ColumnList.getString(i, "COLUMN_NAME"))).append(" != ''\">").append("\r\n");							} else {								sb.append("   <if test=\"").append(ColumnList.getString(i, "COLUMN_NAME")).append(" != ''\">").append("\r\n");							}						}					}										if( (param_type.equals("I") || param_type.equals("My")) && "EACH".equals(condition_each) ) {											} else {						sb.append("   AND ").append(HoUtil.rPad(ColumnList.getString(i, "T_COLUMN_NAME"),ColumnList.getInt(i, "A_COLUMN_MAX"), " "));					}										if( param_type.equals("M")) {						sb.append(" = ''");					} else if( param_type.equals("P")) {						sb.append(" = :P");					} else if( param_type.equals("PN")) {						sb.append(" = :P").append(ColumnList.getString(i, "COL_IDX") );					} else if( param_type.equals("I")) {						if( "EACH".equals(condition_each)) {							if( "Y".equals(vo) ) {								sb.append(" \t<foreach collection=\"").append(HoUtil.toCamel(ColumnList.getString(i, "COLUMN_NAME"))).append("\"");								sb.append(" item=\"item\" separator=\",\" open=\"AND ").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(" IN (\" close=\")\">").append("\r\n");								sb.append("      "+HoUtil.rPad("#"+HoUtil.toCamel(ColumnList.getString(i, "COLUMN_NAME"))+"#",ColumnList.getInt(i, "A_COLUMN_MAX")+1, " ")).append("\r\n");								sb.append("   \t</foreach>");							} else {								sb.append("   \t<foreach collection=\"").append(ColumnList.getString(i, "COLUMN_NAME")).append("\"");								sb.append(" item=\"item\" separator=\",\" open=\"AND ").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(" IN (\"  close=\")\">").append("\r\n");								sb.append("      "+HoUtil.rPad("#"+ColumnList.getString(i, "COLUMN_NAME")+"#",ColumnList.getInt(i, "A_COLUMN_MAX")+1, " ")).append("\r\n");								sb.append("   \t</foreach>");							}						} else {							if( "Y".equals(vo) ) {								sb.append(HoUtil.rPad(" = #"+HoUtil.toCamel(ColumnList.getString(i, "COLUMN_NAME"))+"#",ColumnList.getInt(i, "A_COLUMN_MAX")+1, " "));							} else {								sb.append(HoUtil.rPad(" = #"+ColumnList.getString(i, "COLUMN_NAME")+"#",ColumnList.getInt(i, "A_COLUMN_MAX")+2, " "));							}						}					} else if( param_type.equals("My")) {						if( "EACH".equals(condition_each)) {							if( "Y".equals(vo) ) {								sb.append(" \t<foreach collection=\"").append(ColumnList.getString(i, "COLUMN_NAME")).append("\"");								sb.append(" item=\"item\" separator=\",\" open=\"AND ").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(" IN (\" close=\")\">").append("\r\n");								sb.append("      "+HoUtil.rPad("#{"+HoUtil.toCamel(ColumnList.getString(i, "COLUMN_NAME"))+ "}",ColumnList.getInt(i, "A_COLUMN_MAX")+1, " ")).append("\r\n");								sb.append("   \t</foreach>");							} else {								sb.append("   \t<foreach collection=\"").append(ColumnList.getString(i, "COLUMN_NAME")).append("_ES\"");								sb.append(" item=\"").append(ColumnList.getString(i, "COLUMN_NAME")).append("_ES\"").append(" index=\"index\" separator=\",\" open=\"AND ").append(ColumnList.getString(i, "T_COLUMN_NAME")).append(" IN (\"  close=\")\" >").append("\r\n");								sb.append("      "+HoUtil.rPad("#{"+ColumnList.getString(i, "COLUMN_NAME")+ "_ES}",ColumnList.getInt(i, "A_COLUMN_MAX")+1, " ")).append("\r\n");								sb.append("   \t</foreach>");							} 						} else {							if( "Y".equals(vo) ) {								sb.append(HoUtil.rPad(" = #{"+HoUtil.toCamel(ColumnList.getString(i, "COLUMN_NAME"))+"}",ColumnList.getInt(i, "A_COLUMN_MAX")+1, " "));							} else {								sb.append(HoUtil.rPad(" = #{"+ColumnList.getString(i, "COLUMN_NAME")+"}",ColumnList.getInt(i, "A_COLUMN_MAX")+1, " "));							}						}					} else {						sb.append(" = ''");					}					if(cw.equals("Y")) {						sb.append("  ").append(JoinColumnList.getString(i, "COLUMN_COMMENTS"));					}					// 조건식 들어가는 부분..					if( param_type.equals("I")) {						if( "IF".equals(condition)) {							sb.append("\r\n   </if>");						}					} else if( param_type.equals("My")) {						if( "IF".equals(condition)) {							sb.append("\r\n   </if>");						}					}										sb.append("\r\n");				}			}		}		return HoUtil.escapeForHtml(sb.toString());	}%>