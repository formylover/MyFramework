package project.jun.dao;import java.sql.SQLException;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import javax.naming.NamingException;import project.jun.aop.advice.HoCacheAdvice;import project.jun.dao.parameter.HoQueryParameterMap;import project.jun.dao.result.HoMap;import project.jun.dao.result.HoList;import project.jun.dao.result.transfigure.HoMapHasList;import project.jun.dao.result.transfigure.HoSetHasMap;import project.jun.util.HoArrayList;import project.jun.util.cache.HoCache;import project.jun.util.cache.HoEhCache;import project.jun.exception.HoException;public class HoDao extends HoDaoSupport {	String initDataSqlId = "";	String initDataCache = "";	String initDataColumn = "CD";	String initDataGroupColumn = "P_CD";	String initColumnSqlId = "";	String initColumnCodeMapSqlId = "";	String initButtonSqlId = "";	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#selectOne(java.lang.String)	 */	public HoMap selectOne(String sqlId)  {		return super.queryForInfo(sqlId);	}	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#selectOne(java.lang.String)	 */	public HoMap selectOne(String sqlId, boolean checkOne) throws HoException {		return super.queryForInfo(sqlId, checkOne);	}	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#selectOne(java.lang.String)	 */	public HoMap selectOne(String sqlId, HoQueryParameterMap value) {		return super.queryForInfo(sqlId, value);	}	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#selectOne(java.lang.String)	 */	public HoMap selectOne(String sqlId, HoQueryParameterMap value, boolean checkOne) throws HoException {		return super.queryForInfo(sqlId, value, checkOne);	}	/**	 * 0건이상의 정보를 가져온다.	 */	public HoList select(String sqlId) {		return super.queryForList(sqlId);	}	/**	 * 0건이상의 정보를 가져온다.	 */	public HoList select(String sqlId, HoQueryParameterMap value) {		return super.queryForList(sqlId, value);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int execute(String sqlId) {		return super.update(sqlId);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int forceExecute(String sqlId) {		return super.forceUpdate(sqlId);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @param expect CUD되기 원하는 결과수.	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int execute(String sqlId, int expect) throws HoException {		int result = this.execute(sqlId);		if( result == expect ) {			return result;		} else {			HoArrayList msg = new HoArrayList();			msg.add(expect);			msg.add(result);			throw new HoException("HO-ERR-DB0004", msg );		}	}	/**	 * CUD를 실행한다.	 * @param sql	 * @param value	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int execute(String sqlId, HoQueryParameterMap value) {		return super.update(sqlId, value);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @param value	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int forceExecute(String sqlId, HoQueryParameterMap value) {		return super.forceUpdate(sqlId, value);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @param value	 * @param expect CUD되기 원하는 결과수.	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int execute(String sqlId, HoQueryParameterMap value, int expect)  throws HoException {		int result = this.execute(sqlId, value);		if( result == expect ) {			return result;		} else {			HoArrayList msg = new HoArrayList();			msg.add(expect);			msg.add(result);			throw new HoException("HO-ERR-DB0004", msg );		}	}	/**	 * PROCEDURE를 실행한다.	 * ex) 	{call 프로시져명(#변수명,javaType=java.lang.String,jdbcType=컬럼형태,mode=모드#,										:     					  #USER_EMPID,jdbcType=VARCHAR,mode=IN# ,     					  #ERROR_MSG,javaType=java.lang.String,jdbcType=VARCHAR,mode=OUT#)}     		1. 변수명   : HoQueryParameterMap의 값     		2. 컬럼형태 : VARCHAR, NUMBER     		3. 모드     : IN/OUT	 */	public HoMap call(String sqlId, HoQueryParameterMap value)	{		return super.call(sqlId, value);	}	/**	 * BATCH를 실행한다.	 * @param sql	 * @param values	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public List<HoDaoSqlResult> batch(String sqlId, HoQueryParameterMap [] values) {		if( values == null || values.length == 0 ) {			return new ArrayList<HoDaoSqlResult>();		}		return super.batch(sqlId, values);	}	public List<HoDaoSqlResult> batch(String sqlId, List<HoQueryParameterMap> list) {		if( list.size() == 0 ) {			return new ArrayList<HoDaoSqlResult>();		}		return super.batch(sqlId, (HoQueryParameterMap []) list.toArray(new HoQueryParameterMap[list.size()] ));	}	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#selectOne(java.lang.String)	 */	public HoMap selectOneSql(String sql)  {		return super.queryForInfoSql(sql, new HoQueryParameterMap());	}	/*	 * 한건의 정보를 가져온다.	 * @see project.jun.dao.HoDao#selectOne(java.lang.String)	 */	public HoMap selectOneSql(String sql, HoQueryParameterMap value) {		return super.queryForInfoSql(sql, value);	}	/**	 * 0건이상의 정보를 가져온다.	 */	public HoList selectSql(String sql)  {		return super.queryForListSql(sql, new HoQueryParameterMap());	}	/**	 * 0건이상의 정보를 가져온다.	 */	public HoList selectSql(String sql, HoQueryParameterMap value)  {		return super.queryForListSql(sql, value);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @return	 * @throws HoException	 * @throws SQLException	 * @throws NamingException	 * @throws SQLException	 * @throws NamingException	 */	public int executeSql(String sql)  {		return super.updateSql(sql, new HoQueryParameterMap());	}	/**	 * CUD를 실행한다.	 * @param sql	 * @param expect CUD되기 원하는 결과수.	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int executeSql(String sql, int expect) throws HoException {		int result = this.updateSql(sql, new HoQueryParameterMap());		if( result == expect ) {			return result;		} else {			HoArrayList msg = new HoArrayList();			msg.add(expect);			msg.add(result);			throw new HoException("HO-ERR-DB0004", msg );		}	}	/**	 * CUD를 실행한다.	 * @param sql	 * @param value	 * @param expect CUD되기 원하는 결과수.	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int executeSql(String sql, HoQueryParameterMap value)   {		return this.updateSql(sql, value);	}	/**	 * CUD를 실행한다.	 * @param sql	 * @param value	 * @param expect CUD되기 원하는 결과수.	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int executeSql(String sql, HoQueryParameterMap value, int expect)  throws HoException {		int result = this.updateSql(sql, value);		if( result == expect ) {			return result;		} else {			HoArrayList msg = new HoArrayList();			msg.add(expect);			msg.add(result);			throw new HoException("HO-ERR-DB0004", msg );		}	}	/**	 * SQL을 직접 실행하여 batch를 실행한다.	 * @param sql	 * @param value	 * @return	 * @throws NamingException	 * @throws SQLException	 * @throws HoException	 */	public int [] batchSql(String sql, List value)	{		return super.batchSql( sql, value);	}	/**	 * 초기 공통코드 cache에 로드 처리 	 */	public void loadInitData() {				// Cache생성		HoCache cache = new HoEhCache(getCache());			cache.removeAll();						// 공통 코드 조회		HoList list =  this.select(this.initDataSqlId, new HoQueryParameterMap());				// 각각의 컬럼을 CACHE에 등록..		cache.put(HoCacheAdvice.CACHED_CODE_SET , new HoSetHasMap(list, this.initDataGroupColumn, this.initDataColumn ));				// 공통코드 GROUP을 CACHE에 등록.		HoMapHasList mapList = list.toHoMapHasList(this.initDataGroupColumn);				Iterator it = mapList.keyIterator();		String key = null;		while( it.hasNext() ) {			key = it.next().toString();			cache.put(key, mapList.getHoList(key));		}				// 컬럼  정보..		HoList columnList =  this.select(this.initColumnSqlId, new HoQueryParameterMap());		// 각각의 컬럼을 CACHE에 등록.. ( initDataGroupColumn, initDataColumn 에  해당하는 컬럼은 저장하지 않도록 true 인자 포함)		cache.put(HoCacheAdvice.CACHED_COLUMN_SET , new HoSetHasMap(columnList, this.initDataGroupColumn, this.initDataColumn, true ));				// 컬럼 - 코드 매핑 정보..		HoList columnCodeList =  this.select(this.initColumnCodeMapSqlId, new HoQueryParameterMap());				// 각각의 컬럼을 CACHE에 등록..		cache.put(HoCacheAdvice.CACHED_COLUMN_CODE_SET , new HoSetHasMap(columnCodeList, "COLUMN_NAME" ));				// 버튼 정보 조회.		list =  this.select(this.initButtonSqlId, new HoQueryParameterMap());				cache.put(HoCacheAdvice.CACHED_BUTTON_SET , new HoSetHasMap(list, "BTN_ID" ));	}	/**	 * 초기 공통코드 cache로드시 사용할 쿼리	 * @param initDataSqlId	 */	public void setInitDataSqlId(String initDataSqlId) {		this.initDataSqlId = initDataSqlId;	}	/**	 * 초기 공통 코드 cache로드에 사용될 영역.	 * @param initDataCache	 */	public void setInitDataCache(String initDataCache) {		this.initDataCache = initDataCache;	}		/**	 * 코드를 구분 하기 위한 구분 컬럼..	 * @param initDataColumn	 */	public void setInitDataColumn(String initDataColumn) {		this.initDataColumn = initDataColumn;	}			public void setInitDataGroupColumn(String initDataGroupColumn) {		this.initDataGroupColumn = initDataGroupColumn;	}				/*	 * 컬럼별  정보..	 */	public void setInitColumnSqlId(String initColumnSqlId) {		this.initColumnSqlId = initColumnSqlId;	}				/*	 * 컬럼별 코드 정보..	 */	public void setInitColumnCodeMapSqlId(String initColumnCodeMapSqlId) {		this.initColumnCodeMapSqlId = initColumnCodeMapSqlId;	}			/**	 * 버튼 정보	 * @param initButtonSqlId	 */	public void setInitButtonSqlId(String initButtonSqlId) {		this.initButtonSqlId = initButtonSqlId;	}		}