package project.jun.dao.result;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import org.apache.ibatis.metadata.result.MetaData;import project.jun.util.HoFormatter;import project.jun.util.HoUtil;import project.jun.dao.result.processor.HoRecordProcessor;import project.jun.exception.HoDataNotFoundException;import project.jun.exception.HoException;public class HoMap extends HoResult {	private  Map<String, Object>             obj = null;	public HoMap() {		this.obj = new HashMap();	}	/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 Map일 경우	 * 쿼리 결과값은 Map객체에 넣는다.	 * (MetaData정보는 null임)	 * @param obj	 */	public HoMap( Map<String, Object> obj) {		this.obj = obj;	}	/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 Objec가 List형태이고,	 * 첫번째 정보가 ResultSetMetaData정보일 경우	 * 1번째 MetaData정보는 MetaData에 넣고,	 * 2번째 쿼리 결과값은 Map객체에 넣는다.	 * @param obj	 */	public HoMap( Object obj) {		if( obj!=null && obj instanceof List && ((List)obj).size() > 0 && ((List)obj).get(0) instanceof MetaData) {			super.setMetaData((MetaData) ((List)obj).get(0));			if( ((List)obj).size() > 1) {				if( (((List)obj).get(1)) instanceof HoMap ) {					this.obj = ((HoMap) ((List)obj).get(1)).getMap();					logger.debug("===> HoMap " + ((HoMap) ((List)obj).get(1)).getMap() );				} else {					logger.debug("===> Map " + (Map) ((List)obj).get(1) );					this.obj = (Map) ((List)obj).get(1);				}			}		} else if( obj instanceof Map ) {			this.obj = (Map) obj;		} else if( obj instanceof HoMap ) {			this.obj = ((HoMap) obj).getMap();		}	}	/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 Objec가 List형태이고,	 * 첫번째 정보가 ResultSetMetaData정보일 경우	 * 1번째 MetaData정보는 MetaData에 넣고,	 * 2번째 쿼리 결과값은 Map객체에 넣는다.	 * @param obj	 * @throws HoException	 */	public HoMap( Object obj, boolean checkOne) throws HoException {		if( obj!=null && obj instanceof List && ((List)obj).size() > 0 && ((List)obj).get(0) instanceof MetaData) {			super.setMetaData((MetaData) ((List)obj).get(0));			if( checkOne && ((List)obj).size() == 1) {				throw new HoDataNotFoundException();			} else {				if( ((List)obj).size() > 1) {					this.obj = (Map) ((List)obj).get(1);				}			}		} else if( obj instanceof Map ) {			this.obj = (Map) obj;		}	}	/**	 * iBatis 실행후 1건의 결과 값이 있을 경우 return한 List이고,	 * 첫번째 정보가 ResultSetMetaData정보일 경우	 * 1번째 MetaData정보는 MetaData에 넣고,	 * 2번째 쿼리 결과값은 Map객체에 넣는다.	 * @param obj	public HoMap( List list ) {		if( list!=null && list.size() > 0 && list.get(0) instanceof MetaData) {			super.setMetaData((MetaData) list.get(0));			if( list.size() > 1) {				this.obj = (Map) list.get(1);			}		} else if( list!=null && list.size() > 0 && list.get(0) instanceof Map ) {			this.obj = (Map) list.get(0);		} else {			this.obj = new HashMap();		}	}	 */	/**	 * <pre>	 * WizMap의 row의 MetaData Key Set을 조회한다.	 * </pre>	 * @param list	 * @return	 * @exception	 * @see	 */	public Set getKetSet() {		Set keySet = null;		// Record의 key를 조회한다.		if( obj != null ) {			keySet = new TreeSet(obj.keySet());		}		return keySet;	}	/**	 * 쿼리결과의 컬럼필드를 Iterator로 return한다.	 * 단, 쿼리 결과가 있어야 사용가능함..	 * @return	 */    public Iterator keyIterator() {		Set keySet = null;		if( obj != null ) {			keySet = new TreeSet(obj.keySet());		}		if( keySet != null ) {			return keySet.iterator();		} else {			return null;		}    }	/**	 * 쿼리 결과를 Map으로 얻는다.	 * @return	 */	public Map getMap() {		return this.obj;	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 Object 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param column	 * @return	 */	public Object get( String column ){		return this.obj.get(column.toUpperCase());	}	/**	 * 쿼리 결과중 column컬럼의 값을 value로 변경하거나,	 * 쿼리 결과에 column이 없을 경우 value로 추가한다.	 * @param column	 * @param value	 * @return	 */	public Object put( String column, Object value ) {		return this.obj.put(column, value);	}	/**	 * 쿼리 결과값이 없는지 확인	 * @return boolean	 */	public boolean isEmpty() {		if( this.obj == null ) {			return true;		}		return this.obj.isEmpty();	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 String 형태로 return	 * 1. 결과 값이 Data형태일 경우에는 yyyy-MM-dd형태로 return	 * 2. 결과 값이 null이거나, Exception발생시에는 ""를 return	 * @param column	 * @return	 */	public String getString( String column ) {		return getString(column, "");	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 String 형태로 return	 * 1. 결과 값이 Data형태일 경우에는 yyyy-MM-dd형태로 return	 * 2. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param column	 * @param defaultValue	 * @return	 */	public String getString(String column, String defaultValue ) {		return getString(column, get(column), defaultValue);	}	/**	 * "_"로 구분된 배열을 조회한다.	 * @param column	 * @return	 */	public String[] getStringParts(String column ) {		return getStringParts(column,  "_");	}	/**	 * delimeter 로 구분된 배열을 조회한다.	 * @param column	 * @param delimeter	 * @return	 */	public String[] getStringParts(String column, String delimeter ) {		return getString(column).split(delimeter);	}	/**	 * 여러 정보의 data를 "_"구분자로 구분되어있을 경우 pos에 해당하는 값을 return	 * ex) 1. getStringPart("0_1_5_10", 0) -> return "0";	 *     2. getStringPart("0_1_5_10", 2) -> return "5";	 * @param column	 * @param pos	 * @return	 */	public String getStringPart(String column, int pos ) {		return getStringPart(column, pos, "_", "_");	}	/**	 * 여러 정보의 data를 "_"구분자로 구분되어있을 경우 pos에 해당하는 값을 return	 * ex) 1. getStringPart("0_1_5_10", 0) -> return "0";	 *     2. getStringPart("0_1_5_10", 2) -> return "5";	 * @param column	 * @param pos	 * @return	 */	public String getStringPart(String column, int pos, String defVal) {		return getStringPart(column, pos, "_", defVal);	}	/**	 * 여러 정보의 data를 delimeter구분자로 구분되어있을 경우 pos에 해당하는 값을 return	 * ex) 1. getStringPart("0_1_5_10", 0, "_") -> return "0";	 *     2. getStringPart("0_1_5_10", 2, "_") -> return "5";	 *     3. getStringPart("0_1_5_10", 4, "_") -> return "_"; (IndexOutOfBoundsException);	 * @param column	 * @param pos	 * @param delimeter	 * @return	 */	public String getStringPart(String column, int pos, String delimeter, String defVal ) {		String [] parts = getString(column).split(delimeter);		if( parts.length > pos ) {			return parts[pos];		} else {			return defVal;		}	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 int 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param column	 * @return	 */	public int getInt( String column ) {		return getInt(column, 0);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 int 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param column	 * @return	 */	public int getInt( String column, int detaultValue ) {		return getInt( column,  get(column), detaultValue );	}	/**	 * 여러 정보의 data를 "_"구분자로 구분되어있을 경우 pos에 해당하는 값을 return	 * ex) 1. getStringPart("0_1_5_10", 0) -> return "0";	 *     2. getStringPart("0_1_5_10", 2) -> return "5";	 * @param column	 * @param pos	 * @return	 */	public int getIntPart(String column, int pos ) {		return getIntPart(column, pos, "_", 0);	}	/**	 * 여러 정보의 data를 "_"구분자로 구분되어있을 경우 pos에 해당하는 값을 return	 * ex) 1. getStringPart("0_1_5_10", 0) -> return "0";	 *     2. getStringPart("0_1_5_10", 2) -> return "5";	 * @param column	 * @param pos	 * @return	 */	public int getIntPart(String column, int pos, int defVal ) {		return getIntPart(column, pos, "_", defVal);	}	/**	 * 여러 정보의 data를 delimeter구분자로 구분되어있을 경우 pos에 해당하는 값을 return	 * ex) 1. getStringPart("0_1_5_10", 0, "_") -> return "0";	 *     2. getStringPart("0_1_5_10", 2, "_") -> return "5";	 *     3. getStringPart("0_1_5_10", 4, "_") -> return defVal; (IndexOutOfBoundsException);	 * @param column	 * @param pos	 * @param delimeter	 * @return	 */	public int getIntPart(String column, int pos, String delimeter, int defVal ) {		String [] parts = getString(column).split(delimeter);		if( parts.length > pos ) {			try {				return Integer.parseInt(parts[pos]);			} catch(Exception e) {				return defVal;			}		} else {			return defVal;		}	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 long 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0L을 return	 * @param column	 * @return	 */	public long getLong( String column ) {		return getLong(column, 0L);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 long 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param column	 * @return	 */	public long getLong( String column,  long detaultValue) {		return getLong( column,  get(column), detaultValue);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 double 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param column	 * @return	 */	public double getDouble( String column ) {		return getDouble(column, 0);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 double 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param column	 * @return	 */	public double getDouble( String column, long detaultValue ) {		return getDouble( column,  get(column), detaultValue);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 escape형태로 return	 * (&, >, <, ', \, \\x28, \\x29, \r\n, \n, ' ', \t)문자만 변경	 * @param column	 * @return	 */	public String getStringForHtml( String column ) {		return HoUtil.escapeForHtml(getString(column));	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 escape형태로 return	 * (&, >, <, ', \)문자만 변경	 * @param column	 * @return	 */	public String getStringForInput( String column ) {		return HoUtil.escapeForInput(getString(column));	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 ###,###,###,###,###,###,###형태로 return	 * @param column	 * @return	 */	public String getCurrencyFormat( String column ) {		return HoFormatter.toCurrencyFormat(get(column), displayFormat.get("CURRENCY").toString());	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 format형태로 return	 * @param column	 * @return	 */	public String getCurrencyFormat( String column, String format) {		return HoFormatter.toNumbericFormat(get(column), format);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 ###,###,###,###,###,###,###.000형태로 return	 * @param column	 * @return	 */	public String getPointFormat( String column ) {		return HoFormatter.toPointFormat(getString(column), super.getPointFormat(column));	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 ###,###,###,###,###,###,###.000형태로 return	 * @param column	 * @return	 */	public String getPointFormat( String column, String format ) {		return HoFormatter.toPointFormat(getString(column), format);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 "#,##0.00"형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param column	 * @return	 */	public String getNumberFormat( String column ) {		return HoFormatter.toNumberFormat( get(column), displayFormat.get("NUMBER").toString()  );	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 format형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0를 return	 * @param column	 * @return	 */	public String getNumberFormat( String column, String format ) {		return getNumberFormat(column, "0", format);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 format형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param column	 * @return	 */	public String getNumberFormat( String column, String defaultValue, String format ) {		return getNumberFormat(column, get(column), defaultValue, format);	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 [yyyy-MM-dd a hh:mm:ss]로 구분한 형태로 return	 * @param column	 * @return	 */	public String getDateFormat(String column ) {		return HoFormatter.toDateFormat( get(column), displayFormat );	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 [yyyy-MM-dd a hh:mm:ss]로 구분한 형태로 return	 * @param column	 * @return	 */	public String getDateTimeFormat( String column ) {		return HoFormatter.toDateTimeFormat( get(column), displayFormat );	}	/**	 * 쿼리 결과 Map을 String으로 return한다.	 */	public String toString() {		if( this.obj == null) {			return null;		} else {			return this.obj.toString();		}	}	/**	 * <pre>	 * WizMapList의 각각의 row에 해당하는 정보를 element로 만들어 준다.	 * </pre>	 * @param list	 * @param rowCnt	 * @return	 * @exception	 * @see	 */	public String toXML(String id) {		StringBuffer sbRow = new StringBuffer(1024);		// list의 각 row별 key값을 다시 초기화 한다.		sbRow.append("<dataset id=\""+id+"\">\n");		sbRow.append("	<record>\n");		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			sbRow.append("		<" + getMetaData().getColumnName(i).toUpperCase() + ">");			sbRow.append("<![CDATA[" + this.getString(getMetaData().getColumnName(i)) + "]]>");			sbRow.append("</" + getMetaData().getColumnName(i).toUpperCase() + ">\n");		}		sbRow.append("	</record>\n");		sbRow.append("</dataset>");		return sbRow.toString();	}	/**	 * <pre>	 *  javascript형태	 * </pre>	 */	public String toJavascriptDataArray() {		StringBuffer sbRow = new StringBuffer(1024);		sbRow.append('[');		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');			}			sbRow.append("'" +HoUtil.toJsonString(getString(getMetaData().getColumnName(i)))+ "'");		}		sbRow.append("];\n");		return sbRow.toString();	}	/**	 * 'columnValue1', 'columnValue2', 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptArgString( ) {		StringBuffer sb = new StringBuffer();		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sb.append(',');			}			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(getMetaData().getColumnName(i))));			sb.append('\'');		}		return sb.toString();	}	/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel() {		String [] arrSet = new String[getMetaData().getColumnCount()];		for( int i=0; i<getMetaData().getColumnCount(); i++) {			arrSet[i] = getMetaData().getColumnName(i);		}		return toJsonCamel(arrSet);	}	/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel(Set set) {		Iterator it = set.iterator();		String [] arrSet = new String[set.size()];		for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}		return toJsonCamel(arrSet);	}	/**	 * columnName1 : 'columnValue1', columnName2 : 'columnValue2', columnName3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJsonCamel(String [] set) {		StringBuffer sb = new StringBuffer();		for( int i=0 ; i<set.length; i++ ) {			if( i!=0 ) {				sb.append(',');			}			sb.append(HoUtil.toCamel(set[i]));			sb.append(':');			sb.append('\'');			sb.append(HoUtil.toJsonString(this.getString(set[i].toUpperCase())));			sb.append('\'');		}		return sb.toString();	}	/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson() {		String [] arrSet = new String[getMetaData().getColumnCount()];		for( int i=0; i<getMetaData().getColumnCount(); i++) {			arrSet[i] = getMetaData().getColumnName(i);		}		return toJson(arrSet);	}	/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(Set set) {		Iterator it = set.iterator();		String [] arrSet = new String[set.size()];		for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}		return toJson(arrSet);	}	/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(String [] set) {		StringBuffer sb = new StringBuffer();		for( int i=0 ; i<set.length; i++ ) {			if( i!=0 ) {				sb.append(',');			}			sb.append("\"" + set[i].toUpperCase() +"\"");			sb.append(':');			sb.append('\"');			sb.append(HoUtil.toJsonString(this.getString(set[i].toUpperCase())));			sb.append('\"');		}		return sb.toString();	}	/**	 * column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... 형태로 return	 * @param idx	 * @return	 */	public String toJson(String [][] set) {		StringBuffer sb = new StringBuffer();		for( int i=0 ; i<set.length; i++ ) {			if( i!=0 ) {				sb.append(',');			}			sb.append(set[i][0].toUpperCase());			sb.append(':');			sb.append('\"');			sb.append(HoUtil.toJsonString(this.getString(set[i][1].toUpperCase())));			sb.append('\"');		}		return sb.toString();	}	/**	 * { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject() {		String [] arrSet = new String[getMetaData().getColumnCount()];		for( int i=0 ; i<getMetaData().getColumnCount(); i++ ) {			arrSet[i] = getMetaData().getColumnName(i);		}		return toJavaScriptObject(arrSet);	}	/**	 * Set에 해당하는 column을 가지고 { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject(Set set) {		String [] arrSet = new String[set.size()];		Iterator it = set.iterator();		for( int i=0 ; it.hasNext(); i++ ) {			arrSet[i] = (String) it.next();		}		return toJavaScriptObject(arrSet);	}	/**	 * Set에 해당하는 column을 가지고 { column_name1 : 'columnValue1', column_name2 : 'columnValue2', column_name3 : 'columnValue3' ... }형태로 return	 * @param idx	 * @return	 */	public String toJavaScriptObject(String [] set) {		StringBuffer sb = new StringBuffer();		sb.append('{');		for( int i=0 ; i<set.length; i++ ) {			if( i!=0 ) {				sb.append(',');			}			sb.append(set[i].toUpperCase());			sb.append(':');			sb.append('\"');			sb.append(HoUtil.toJsonString(this.getString(set[i].toUpperCase())));			sb.append('\"');		}		sb.append('}');		return sb.toString();	}}