package project.jun.dao.result;import java.sql.Clob;import java.sql.Timestamp;import java.sql.Types;import java.text.DecimalFormat;import java.util.Date;import java.util.HashMap;import java.util.Map;import org.apache.ibatis.metadata.result.MetaData;import org.apache.log4j.Logger;import project.jun.dao.result.processor.HoRecordProcessor;import project.jun.util.HoFormatter;import project.jun.util.HoUtil;/** * @author  sks */public class HoResult {	protected Logger logger = Logger.getLogger(HoResult.class);	protected  Map<String, HoRecordProcessor>  processorMap  = new HashMap<String, HoRecordProcessor>();	protected  Map<String, String>  processorNameMap  = new HashMap<String, String>();	final static int STRING   = 1;	final static int CURRENCY = 2; // 돈	final static int DATE     = 11; // 날짜	final static int YMD      = 3; // 년월일	final static int HMS      = 4; // 시분초	final static int HM       = 5; // 시분	final static int POINT    = 6; // 소숫점	final static int CLOB     = 7; // CLOB	final static int BLOB     = 8; // BLOB	final static int LONG     = 9; // LONG	final static int INT      = 10; // INT	/**	 * @uml.property  name="metaData"	 */	private  MetaData metaData = new MetaData();	/**	 * @uml.property  name="displayFormat"	 */	protected  Map<String, String>      displayFormat          = new HashMap<String, String>();	/**	 * 컬럼의 값을 조합 하여 새로운 결과 값을 구하기 위한 HoRecordProcessor 설정	 * @param processor	 */	public void setHoRecordProcessor(HoRecordProcessor processor) {		processorMap.put(processor.getColumn(), processor);		processorNameMap.put(processor.getColumn().toUpperCase() + "_PRC", processor.getColumn());	}			/**	 * 컬럼의 값을 조합 하여 새로운 결과 값을 구하기 위한 HoRecordProcessor 조회	 * @param processor	 */	public HoRecordProcessor getHoRecordProcessor(String column) {		String prcName = processorNameMap.get(column.toUpperCase() + "_PRC");		return processorMap.get(prcName);	}	/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 * @uml.property  name="displayFormat"	 */	public Map<String, String> getDisplayFormat() {		return this.displayFormat;	}	/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 * @uml.property  name="displayFormat"	 */	public void setDisplayFormat(Map<String, String> displayFormat) {		this.displayFormat.putAll(displayFormat);	}	/**	 * Data가 조회될때의 데이터 형태 yyyy/MM/dd or MM/dd/yyyy or MMM/dd/yyyy  or yyyy-MM-dd	 * @return	 */	public void setDisplayFormat(String key, String displayFormat) {		if( this.displayFormat == null ) {			this.displayFormat  = new HashMap<String, String>();		}		this.displayFormat.put(key, displayFormat);	}	/**	 * ResultSetMetaData정보를 set	 * @return	 * @uml.property  name="metaData"	 */    public void setMetaData(MetaData metaData) {    	this.metaData = metaData;    }	/**	 * 쿼리결과의 ResultSetMetaData정보를 return	 * @return	 * @uml.property  name="metaData"	 */	public MetaData getMetaData() {		return this.metaData;	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 String 형태로 return	 * 1. 결과 값이 Data형태일 경우에는 yyyy-MM-dd형태로 return	 * 2. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param column	 * @param obj	 * @param defaultValue	 * @return	 */	public String getString(String column, Object obj, String defaultValue) {		try {			if( obj == null )				return defaultValue;			else if( obj instanceof String ) {				if( getType(column) == YMD || getType(column) == DATE ) {					return HoFormatter.toDateFormat(obj, displayFormat);				} else {					return (String)obj;				}			} else if( obj instanceof Clob ) {				return HoUtil.getStringForCLOB((Clob)obj);			} else if( obj instanceof Timestamp) {				return HoFormatter.toDateFormat(obj, displayFormat);			} else if( obj instanceof Date) {				return HoFormatter.toDateFormat(obj, displayFormat);			} else {				if( getType(column) == YMD || getType(column) == DATE  ) {					return HoFormatter.toDateFormat((String)obj, displayFormat);				} else if(getType(column) == HMS || getType(column) == HM  ) {					return HoFormatter.toTimeFormat(obj, displayFormat);				} else if(getType(column) == INT ) {					return HoFormatter.toIntFormat(obj, displayFormat.get("INT").toString());				} else if(getType(column) == CURRENCY ) {					return HoFormatter.toCurrencyFormat(obj, displayFormat.get("CURRENCY").toString());				} else if(getType(column) == POINT ) {					return getPointFormat(column);				} else {					return obj.toString();				}			}		}		catch( Exception e) {			return defaultValue;		}	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 int 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 detaultValue를 return	 * @param row	 * @param column	 * @param detaultValue	 * @return	 */	public int getInt(String column, Object obj, int detaultValue ) {		if( obj == null )			return detaultValue;		else if( obj instanceof Number ) {			Number num = (Number)obj;			return num.intValue();		}		else if( obj instanceof String )			return Integer.parseInt(obj.toString());		else			return detaultValue;	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 long 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0L을 return	 * @param row	 * @param column	 * @param detaultValue	 * @return	 */	public long getLong(String column, Object obj, long detaultValue ) {		if( obj == null )			return detaultValue;		else if( obj instanceof Number )			return ((Number)obj).longValue();		else if( obj instanceof String )			return Long.parseLong(obj.toString());		else			return detaultValue;	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 double 형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 0을 return	 * @param row	 * @param column	 * @param detaultValue	 * @return	 */	public double getDouble(String column, Object obj, double detaultValue ) {		if( obj == null )			return detaultValue;		else if( obj instanceof Number )			return ((Number)obj).doubleValue();		else if( obj instanceof String )			return Double.parseDouble(obj.toString());		else			return detaultValue;	}	/**	 * 쿼리 결과중 column컬럼에 해당하는 결과를 format형태로 return	 * 1. 결과 값이 null이거나, Exception발생시에는 defaultValue를 return	 * @param row	 * @param column	 * @param format	 * @return	 */	public String getNumberFormat( String column, Object obj, String defaultValue, String format ) {		DecimalFormat commaFormat = new DecimalFormat();		int pos = format.indexOf(".");		Number value = (Number) obj;		try {			if( value == null ) {				if (pos!=-1) {					return commaFormat.format(0.0);				} else {					return commaFormat.format(0L);				}			} else {				if (pos!=-1) {					return commaFormat.format(value.doubleValue());				} else {					return commaFormat.format(value.longValue());				}			}		}		catch( Exception e) {			return defaultValue;		}	}	/**	 * MetaData정보를 string으로 만든다.	 * @return	 */	public String getMetaDataString() {		StringBuffer sbRow = new StringBuffer(1024);		for( int i=0 ; getMetaData()!=null && i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');				if( i%20 == 0 ) {					sbRow.append("\r\n");				}			}			sbRow.append("'"+getMetaData().getColumnName(i)+"'");	   }		return sbRow.toString();	}	/**	 * MetaData정보를 string으로 만든다.	 * @return	 */	public String getMetaDataString( String prefix ) {		StringBuffer sbRow = new StringBuffer(1024);		for( int i=0 ; getMetaData()!=null &&  i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');				if( i%5 == 0 ) {					sbRow.append("\r\n");				}			}			sbRow.append("{ "+prefix+" : '"+getMetaData().getColumnName(i)+"' } ");	   }		return sbRow.toString();	}	/**	 * <pre>	 * id 있는 javascript형태	 * </pre>	 */	public String toMetaDataJavascriptArray() {		StringBuffer sbRow = new StringBuffer(1024);		// list의 각 row별 key값을 다시 초기화 한다.		sbRow.append('[');		for( int i=0 ; getMetaData()!=null &&  i<getMetaData().getColumnCount(); i++ ) {			if( i!=0 ) {				sbRow.append(',');			}			sbRow.append("'"+getMetaData().getColumnName(i)+"'");	   }		sbRow.append("];");		return sbRow.toString();	}	/**	 * 필드(컬럼)명이 날짜 인지 확인한다.	 * @param fieldNam	 * @return	 */	public int getType(String fieldName) {		if( getMetaData() == null ) {			return STRING;		}		int columnIndex = this.getMetaData().getColumnIndex(fieldName);		if( columnIndex < 0 ) {			return STRING;		}		int columnType = this.getMetaData().getColumnType(columnIndex);		if( columnType == Types.DATE ) {			return DATE;		}		// 숫자		else if( columnType == Types.BIGINT  || columnType == Types.NUMERIC || columnType == Types.DECIMAL ) {			// TODO			if( fieldName.toUpperCase().endsWith("_AMT") || fieldName.toUpperCase().endsWith("_COST")) {				return CURRENCY;			} else {				return INT;			}		}		// 소숫점 숫자		else if( columnType == Types.DOUBLE || columnType == Types.FLOAT ) {			return POINT;		}		// CLOB		else if( columnType == Types.CLOB ) {			return CLOB;		}		// BLOB		else if( columnType == Types.BLOB ) {			return BLOB;		}		// LONG		else if( columnType == Types.LONGVARCHAR  || columnType == Types.LONGVARBINARY ) {			return LONG;		} else {			if( fieldName.toUpperCase().endsWith("_YMD")) {				return YMD;			} else if( fieldName.toUpperCase().endsWith("_DT")					|| fieldName.toUpperCase().endsWith("_DATE")) {				return DATE;			}			// 시분초로 판단되는 경우			else if(fieldName.toUpperCase().endsWith("_HMS")) {				return HMS;			}			// 시분로 판단되는 경우			else if( fieldName.toUpperCase().endsWith("_HM")) {				return HM;			}			// 금액으로 판단되는 경우			else if( fieldName.toUpperCase().endsWith("_AMT")					|| fieldName.toUpperCase().endsWith("_COST")) {				return CURRENCY;			}			// 소숫점			else if( this.getMetaData().getScale(columnIndex) > 0 ) {				return POINT;			}			else {				return STRING;			}		}	}	protected String getPointFormat(String fieldName) {		if(  getMetaData() == null ) {			return "00000.00";		}		int columnIdx = getMetaData().getColumnIndex(fieldName);		String format = displayFormat.get("POINT").toString();		if( columnIdx >= 0 && getMetaData().getPrecision(columnIdx) > 0) {			String precision = "";			if( getMetaData().getPrecision(columnIdx) > 0 ) {				precision = HoUtil.rPad("0", getMetaData().getPrecision(columnIdx), "0");				return format = format.replaceAll(".00", "."+precision);			}		}		return format;	}}