package project.jun.util;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.nio.channels.FileChannel;import java.util.ArrayList;import java.util.List;import java.io.IOException;import project.jun.config.HoConfig;/** * @author  sks */public class HoFileManager {	/**	 * @uml.property  name="hfm"	 * @uml.associationEnd  	 */	private static HoFileManager hfm = null;	private HoConfig  hoConfig = null;		public HoFileManager() {	}	public static HoFileManager getInstance() {		if( hfm == null) {			hfm = new HoFileManager();		}		return hfm;	}		void setHoConfig(HoConfig hoConfig) {		this.hoConfig = hoConfig;	}		/**  * source에서 target으로의 파일 복사	* @param source 복사할 파일명을 포함한 절대 경로	* @param target 복사될 파일명을 포함한 절대경로  */	public void copy(String source, String target) {  //복사 대상이 되는 파일 생성		File sourceFile = new File( source ); //스트림, 채널 선언		FileInputStream inputStream = null;		FileOutputStream outputStream = null;		FileChannel fcin = null;		FileChannel fcout = null;		try {   //스트림 생성			inputStream = new FileInputStream(sourceFile);			outputStream = new FileOutputStream(target);   //채널 생성			fcin = inputStream.getChannel();			fcout = outputStream.getChannel();      //채널을 통한 스트림 전송			long size = fcin.size();			fcin.transferTo(0, size, fcout);		} catch (Exception e) {			e.printStackTrace();		} finally {   //자원 해제			try{    fcout.close();   }catch(IOException ioe){}			try{    fcin.close();   }catch(IOException ioe){}			try{    outputStream.close();   }catch(IOException ioe){}			try{    inputStream.close();   }catch(IOException ioe){}		}	}	public List readFile(String fileName) {		List list = new ArrayList();		try {			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream( fileName )));			String s=null;			while ((s = reader.readLine()) != null) {				list.add(s);		    }			reader.close();		} catch (FileNotFoundException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}		return list;	}	/**	 * dir경로에 해당하는 파일목록을  조회한다.	 * @param dir	 * @return	 */	public List getFileList() {		if( this.hoConfig != null ) {			return getFileList(this.hoConfig.getDirWasHome());		} else {			return null;		}	}	/**	 * dir경로에 해당하는 파일목록을  조회한다.	 * @param dir	 * @return	 */	public List getFileList(String dir) {		return getFileList(dir, false);	}	/**	 * dir경로 및 하위dir에 해당하는 파일 목록을 조회한다.	 * @param dir	 * @param includeSubDir	 * @return	 */	public List getFileList(String dir, boolean includeSubDir) {		List list = new ArrayList();		File sourceDir = new File( dir ); //스트림, 채널 선언		if( sourceDir.exists() ) {            File[] fileList = sourceDir.listFiles();            for( int i=0 ; i<fileList.length ; i++ ) {        		list.add(fileList[i]);            	if( includeSubDir && fileList[i].isDirectory() ) {            		list.addAll(getFileList(fileList[i].getAbsolutePath(), includeSubDir));            	}            }		}		return list;	}		public static void main(String [] args) {		HoFileManager fm = HoFileManager.getInstance();		List list = fm.getFileList("F:/Repository/Git/MyFramework/MyFramework/src/project/jun", true);		File file = null;		for( int i=0 ; i<list.size(); i++ ) {			file = (File) list.get(i);			System.out.println( file.getAbsolutePath() );		}	}}