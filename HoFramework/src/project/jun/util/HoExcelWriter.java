package project.jun.util;import java.io.FileNotFoundException;import java.io.IOException;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFCellStyle;import org.apache.poi.hssf.usermodel.HSSFFont;import org.apache.poi.hssf.usermodel.HSSFRichTextString;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.hssf.util.CellRangeAddress;/** * @author  sks */public class HoExcelWriter extends HoExcel {	HSSFWorkbook workbook = null;    HSSFSheet    sheet    = null;    /**	 * @param wb	 * @uml.property  name="workbook"	 */    public void setWorkbook(HSSFWorkbook wb) {    	this.workbook = wb;    }    public void createExel() throws FileNotFoundException, IOException {    	workbook = new HSSFWorkbook();    }    public HSSFWorkbook getWorkBook() {    	return this.workbook;    }    public void createSheet(String sheetName) throws FileNotFoundException, IOException {    	sheet = workbook.createSheet(sheetName);    }    public void createSheet() throws FileNotFoundException, IOException {    	sheet = workbook.createSheet();    }    public HSSFRow createRow(int rowIdx) throws FileNotFoundException, IOException {    	if( workbook == null ) {    		workbook = new HSSFWorkbook();    	}    	if( sheet == null ) {    		createSheet();    	}    	return sheet.getRow(rowIdx)!=null ? sheet.getRow(rowIdx) : sheet.createRow(rowIdx);    }    public HSSFCell createCell(int rowIdx, String cell) throws FileNotFoundException, IOException {    	return createCell(rowIdx, getCellNum(cell));    }    public HSSFCell createCell(int rowIdx, int cellIdx) throws FileNotFoundException, IOException {    	return createRow(rowIdx).getCell(cellIdx)==null ? createRow(rowIdx).createCell(cellIdx) : sheet.getRow(rowIdx).createCell(cellIdx);    }    public void setCellValue(int rowIdx, String cell, String value) throws FileNotFoundException, IOException {    	HSSFRichTextString strValue = new HSSFRichTextString(value);    	createCell(rowIdx, cell).setCellValue(strValue);    }    public void setCellValue(int rowIdx, int cellIdx, String value) throws FileNotFoundException, IOException {    	HSSFRichTextString strValue = new HSSFRichTextString(value);    	createCell(rowIdx, cellIdx).setCellValue(strValue);    }    public void setCellValue(int rowIdx, String cell, long value) throws FileNotFoundException, IOException {    	createCell(rowIdx, cell).setCellValue(value);    }    public void setCellValue(int rowIdx, int cellIdx, long value) throws FileNotFoundException, IOException {    	createCell(rowIdx, cellIdx).setCellValue(value);    }    public void setCellValue(int rowIdx, String cell, double value) throws FileNotFoundException, IOException {    	createCell(rowIdx, cell).setCellValue(value);    }    public void setCellValue(int rowIdx, int cellIdx, double value) throws FileNotFoundException, IOException {    	createCell(rowIdx, cellIdx).setCellValue(value);    }    public void setCellStyleToTitle(int rowIdx, String cell) throws FileNotFoundException, IOException {    	setCellStyleToTitle(rowIdx, getCellNum(cell));    }    public void setCellStyleToTitle(int rowIdx, int cellIdx) throws FileNotFoundException, IOException {    	if( sheet.getRow(rowIdx).getCell(cellIdx) == null ) {    		createCell(rowIdx, cellIdx).setCellStyle(createTitleCellStyle());    	} else {    		sheet.getRow(rowIdx).getCell(cellIdx).setCellStyle(createTitleCellStyle());    	}    }    public void setCellStyleToData(int rowIdx, String cell) throws FileNotFoundException, IOException {    	setCellStyleToData(rowIdx, getCellNum(cell));    }    public void setCellStyleToData(int rowIdx, int cellIdx) throws FileNotFoundException, IOException {    	if( sheet.getRow(rowIdx).getCell(cellIdx) == null ) {    		createCell(rowIdx, cellIdx).setCellStyle(createDataCellStyle());    	} else {    		sheet.getRow(rowIdx).getCell(cellIdx).setCellStyle(createDataCellStyle());    	}    }    public void setCellStyle(int rowIdx, String cell, HSSFCellStyle style) throws FileNotFoundException, IOException {    	setCellStyle(rowIdx, getCellNum(cell), style);    }    public void setCellStyle(int rowIdx, int cellIdx, HSSFCellStyle style) throws FileNotFoundException, IOException {    	if( sheet.getRow(rowIdx).getCell(cellIdx) == null ) {    		createCell(rowIdx, cellIdx).setCellStyle(style);    	} else {    		sheet.getRow(rowIdx).getCell(cellIdx).setCellStyle(style);    	}    }    public void setWidth(String cellName, short width) {    	if(sheet !=null ) {    		sheet.setColumnWidth(getCellNum(cellName), width);    	}    }    public int getWidth(String cellName) {    	return sheet.getColumnWidth(getCellNum(cellName));    }    public void setHeight(int rowIdx, short height) {    	if( sheet.getRow(rowIdx)!=null ) {    		sheet.getRow(rowIdx).setHeight(height);    	}    }    public void span(int rowFrom, int colFrom, int rowSpanLength, int colSpanLength) {    	sheet.addMergedRegion(new CellRangeAddress(rowFrom, colFrom, rowFrom+rowSpanLength, (colFrom+colSpanLength)));    }    public void addMergedRegion(int rowFrom, String colFrom, int rowTo, String colTo) {    	sheet.addMergedRegion(new CellRangeAddress(rowFrom, getCellNum(colFrom), rowTo, getCellNum(colTo)));    }    public void addMergedRegion(int rowFrom, short colFrom, int rowTo, short colTo) {    	sheet.addMergedRegion(new CellRangeAddress(rowFrom, colFrom, rowTo, colTo));    }    public void addMergedRegion(int rowFrom, int colFrom, int rowTo, int colTo) {    	sheet.addMergedRegion(new CellRangeAddress(rowFrom, colFrom, rowTo, colTo));    }	private HSSFCellStyle createTitleCellStyle() {		HSSFCellStyle cell_style = workbook.createCellStyle();		HSSFFont font = workbook.createFont();		// Border, Foreground Color Setting		cell_style.setBorderBottom(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderLeft(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderRight(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderTop(HSSFCellStyle.BORDER_THIN);		cell_style.setFillPattern((short)1);		cell_style.setFillForegroundColor((short)23);		// Font Setting		font.setFontHeightInPoints((short)10);		font.setColor((short)9);		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);		cell_style.setFont(font);		return cell_style;	}	private HSSFCellStyle createDataCellStyle() {		HSSFCellStyle cell_style = workbook.createCellStyle();		HSSFFont font = workbook.createFont();		// Border, Foreground Color Setting		cell_style.setBorderBottom(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderLeft(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderRight(HSSFCellStyle.BORDER_THIN);		cell_style.setBorderTop(HSSFCellStyle.BORDER_THIN);		// Font Setting		font.setFontHeightInPoints((short)9);		cell_style.setFont(font);		return cell_style;	}}