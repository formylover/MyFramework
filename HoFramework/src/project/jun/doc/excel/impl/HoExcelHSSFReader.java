package project.jun.doc.excel.impl;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.util.Date;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFRichTextString;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import project.jun.doc.excel.HoExcelReader;import project.jun.util.HoFormatter;public class HoExcelHSSFReader implements HoExcelReader {	HSSFWorkbook workbook = null;    HSSFSheet    sheet    = null;    public void setExelFile(InputStream is) throws FileNotFoundException, IOException {    	workbook = new HSSFWorkbook( is );    	sheet = workbook.getSheetAt(0);    }    public void setExelFile(String fileName) throws FileNotFoundException, IOException {    	workbook = new HSSFWorkbook( new FileInputStream( new File( fileName)));    	sheet = workbook.getSheetAt(0);    }    public void setExelFile(File file) throws FileNotFoundException, IOException {    	workbook = new HSSFWorkbook( new FileInputStream( file ));    	sheet = workbook.getSheetAt(0);    }    public void setSheet(int sheetIdx) throws FileNotFoundException, IOException {    	sheet = workbook.getSheetAt(sheetIdx);    }    public Object getRow(int row) throws FileNotFoundException, IOException {    	return sheet.getRow(row);    }    /*     * added for POI     */    public HSSFRow getHSSFRow(int row) throws FileNotFoundException, IOException {    	return sheet.getRow(row);    }    public Object getCell(int row, int cell) throws FileNotFoundException, IOException {    	return getHSSFRow(row).getCell(cell);    }    /*     * added for POI     */    public HSSFCell getHSSFCell(int row, int cell) throws FileNotFoundException, IOException {    	return getHSSFRow(row).getCell(cell);    }    public int getLastRowNum() {    	return sheet.getLastRowNum();    }    public int getLastRowNum(int sheetIdx) throws FileNotFoundException, IOException {    	return workbook.getSheetAt(sheetIdx).getLastRowNum();    }    public int getLastCellNum(int row) throws FileNotFoundException, IOException {    	return getHSSFRow(row).getLastCellNum();    }    public int getLastCellNum(int sheetIdx, int row) throws FileNotFoundException, IOException {    	return workbook.getSheetAt(sheetIdx).getRow(row).getLastCellNum();    }    public Object getValueRichTextString (int row, int cell  ) throws FileNotFoundException, IOException {    	return getCell(row, cell) == null ? new HSSFRichTextString() : getHSSFCell(row, cell).getRichStringCellValue();    }    public HSSFRichTextString getValueHSSFRichTextString (int row, int cell  ) throws FileNotFoundException, IOException {    	return getCell(row, cell) == null ? new HSSFRichTextString() : getHSSFCell(row, cell).getRichStringCellValue();    }    public String getStringValue (int row, int cell  ) throws FileNotFoundException, IOException {    	return getCell(row, cell) == null ? "" : getHSSFCell(row, cell).getRichStringCellValue().getString();    }    public double getDoubleValue (int row, int cell  ) throws FileNotFoundException, IOException {    	return getCell(row, cell) == null ? 0 : getHSSFCell(row, cell).getNumericCellValue();    }    public Date getDateValue (int row, int cell  ) throws FileNotFoundException, IOException {    	return getCell(row, cell) == null ? new Date() : getHSSFCell(row, cell).getDateCellValue();    }    public Object getValue( int row, int cell ) throws FileNotFoundException, IOException {    	Object obj = null;    	try {    		if( getHSSFCell(row, cell).getCellType() == HSSFCell.CELL_TYPE_NUMERIC) {	    		obj = HoFormatter.toNumberRawFormat(new Double(getDoubleValue(row, cell)));	        }	    	else {	    		obj = getStringValue(row, cell);	        }    	} catch(NullPointerException e)    	{    		obj = new String();    	}    	return obj;    }	public Object getCell(int row, String cell) throws FileNotFoundException, IOException {    	return getHSSFRow(row).getCell(heu.getCellNum(cell));	}	public Object getValueRichTextString(int row, String cell) throws FileNotFoundException, IOException {		return getValueRichTextString(row, heu.getCellNum(cell));	}	public String getStringValue(int row, String cell) throws FileNotFoundException, IOException {		return getStringValue(row, heu.getCellNum(cell));	}	public double getDoubleValue(int row, String cell) throws FileNotFoundException, IOException {		return getDoubleValue(row, heu.getCellNum(cell));	}	public Date getDateValue(int row, String cell) throws FileNotFoundException, IOException {		return getDateValue(row, heu.getCellNum(cell));	}	public Object getValue(int row, String cell) throws FileNotFoundException, IOException {		return getValue(row, heu.getCellNum(cell));	}}