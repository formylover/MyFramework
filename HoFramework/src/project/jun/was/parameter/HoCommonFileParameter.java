package project.jun.was.parameter;import java.io.File;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeSet;import org.apache.commons.fileupload.FileItem;import org.apache.commons.fileupload.FileItemFactory;import org.apache.commons.fileupload.FileUploadException;import org.apache.commons.fileupload.disk.DiskFileItemFactory;import org.apache.commons.fileupload.servlet.ServletFileUpload;import project.jun.util.HoDate;import project.jun.util.HoUtil;import project.jun.util.HoValidator;import project.jun.was.HoSession;import project.jun.was.listener.HoFileUploadProgressListener;import project.jun.was.servlet.HoServlet;import project.jun.config.HoConfig;public class HoCommonFileParameter extends HoParameter {		private Map<String, ArrayList<FileItem>> fileItems = null;	private Map<String, ArrayList<String>>   writeFiles = null;	private List<String> paramNameList = new ArrayList<String>();	private long maxFileSize = -1L;	public HoCommonFileParameter( HoServlet hoServlet) {		super(hoServlet);	}	public HoCommonFileParameter( HoServlet hoServlet, HoConfig hConfig) throws FileUploadException, UnsupportedEncodingException {		super(hoServlet, hConfig);				// encode된 char-set설정.		this.characterSet = hConfig.getCharacterSetFile();		this.maxFileSize  = hConfig.getMaxFileSize();		parseRequest();	}		private void parseRequest() throws FileUploadException	{		File fileDir = null;		if( getHoConfig().getDirFileUpload() != null ) {			fileDir = new File( getHoConfig().getDirFileUpload() );						if( !fileDir.exists() ) {				fileDir.mkdirs();			}		}				FileItemFactory factory = new DiskFileItemFactory( 2048, fileDir);		ServletFileUpload upload = new ServletFileUpload( factory );		if( this.maxFileSize != -1) {			upload.setSizeMax(this.maxFileSize);		}		upload.setHeaderEncoding(this.characterSet);				HoFileUploadProgressListener progressListener = new HoFileUploadProgressListener();		upload.setProgressListener(progressListener);				setSessionObject(HoSession.STATUS_FILE_UPLOAD_PROGRESS, progressListener);				List itemList = upload.parseRequest(getRequest());				Iterator iter = itemList.iterator();		FileItem item;		fileItems = new HashMap<String, ArrayList<FileItem>>();		writeFiles = new HashMap<String, ArrayList<String>>();				ArrayList<FileItem> items;		String paramName = null;				while (iter.hasNext()) 		{	    	item = (FileItem)iter.next();	    	paramName = item.getFieldName();	    		    	if( fileItems.containsKey( paramName.toUpperCase() ) ) {	    		items = (ArrayList<FileItem>)fileItems.get( paramName.toUpperCase() );	  	    	} else {	    		items = new ArrayList<FileItem>();	    	}	    	items.add( item );	    	this.fileItems.put(paramName.toUpperCase(), items );	    		    	if( !this.names.containsKey(paramName.toUpperCase())) {				this.names.put(paramName.toUpperCase(), paramName);		    	this.paramNameList.add(paramName.toUpperCase());	    	}		}		// 폴더에 파일을 생성한다..		writeFilesToFolder();			}			public String get(String name) throws UnsupportedEncodingException {		return get( name, null );	}	public String get(String name, String defaultValue) throws UnsupportedEncodingException {		String paramName = getName(name);		if( HoValidator.isEmpty(paramName) || HoValidator.isEmpty(name) ) {			// request.getParameter()값이 없을 경우 default값을 map에 저장한다.			if( HoValidator.isNull(defaultValue) ) {				if( defaultValueMap.containsKey(name.toUpperCase()) ) {					return (String) defaultValueMap.get(name.toUpperCase());				} else {					return "";				}			} else if( !defaultValue.equals("") ) {				defaultValueMap.put(name.toUpperCase(), defaultValue);			}			return defaultValue;		}		ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );		if( items == null || items.size() == 0 ) {			return defaultValue;		}				FileItem item = (FileItem)items.get(0);				if( item == null ){			return defaultValue;		}				// 파일이 아닌경우    	if(item.isFormField()) {    		return item.getString();       	}     	//파일 인경우    	else {			if( name.toUpperCase().endsWith("_RAW") ) {				return item.getName();			} else {	    		ArrayList<String> fileNames = writeFiles.get( name.toUpperCase() );		    		if( fileNames == null || fileNames.size() == 0 ) {	    			return defaultValue;	    		}		    		String fileName = (String)fileNames.get(0);			    		return HoUtil.replaceNull(fileName, defaultValue);			}    	}	}	public FileItem getFileItem(String name) {		String paramName = getName(name);		ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );				if( items == null || items.size() == 0 ) {			return null;		}				return (FileItem)items.get(0);	}	public FileItem[] getFileItems(String name) {		String paramName = getName(name);		ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );				if( items == null || items.size() == 0 ) {			return new FileItem[0];		}		return (FileItem[])items.toArray( new FileItem[ items.size() ] );	}	public HoParameterMap getHoParameterMap() {		return getHoParameterMap(true);	}	public HoParameterMap getHoParameterMap(boolean withSession) {		List<String> list =  getNamesList();		HoParameterMap values = new HoParameterMap();		if( withSession ) {			// 세션정보를 담는다.			values.putAll(this.hoServlet.getHoSession().getMap());		}		String paramName = null;		for( int i=0 ; i<list.size(); i++) {			paramName = (String) list.get(i);			try {				values.put(paramName.toUpperCase(), getValues(paramName));			} catch (Exception e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		return values;	}	public List<String> getNamesListOrdered() {		return this.paramNameList;	}	public String[] getValues(String name) {		return getValues(name, "");	}	public String[] getValues(String name, String defaultValue) {		String paramName = getName(name);				if( HoUtil.replaceNull(name).equals("") || HoUtil.replaceNull(paramName).equals("") ) {			return new String[0];		}				ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );		if( items == null ) {			return new String[0];		}				ArrayList<String> list = new ArrayList<String>();		for( int i=0; i < items.size(); i++ ) {			if( items.get(i).isFormField() ) {				list.add(decodeValue( items.get(i).getString() , defaultValue ));			} else {					if( name.toUpperCase().endsWith("_RAW")) {					list.add(decodeValue( items.get(i).getName(), defaultValue ));				} else {					ArrayList<String> fileNames = writeFiles.get( name.toUpperCase() );						list.add(decodeValue( fileNames.get(i) , defaultValue )); 				}			}		}		String [] values = new String[items.size()];		System.arraycopy(list.toArray(), 0, values, 0, list.size());		return values;	}	public String getQueryString() {		return getRequest().getQueryString();	}	public List getBlockNamesList() {		// TODO Auto-generated method stub		return null;	}	/**	 * 파일명을조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public File getFile( String name ) {		String paramName = getName(name);				if( HoUtil.replaceNull(name).equals("") || HoUtil.replaceNull(paramName).equals("") ) {			return null;		}				ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );				return new File(items.get(0).getName());	}	/**	 * 파일명을 조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public File [] getFiles( String name ){		String paramName = getName(name);				if( HoUtil.replaceNull(name).equals("") || HoUtil.replaceNull(paramName).equals("") ) {			return null;		}				ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );				ArrayList<File> list = new ArrayList<File>();		for( int i=0; i < items.size(); i++ ) {			list.add(new File(items.get(i).getName()));		}		File [] values = new File[items.size()];		System.arraycopy(list.toArray(), 0, values, 0, list.size()); 		return values;	}	/**	 * 전체 파일 경로포함한 파일명을조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public String getFileName( String name ){		String paramName = getName(name);				if( HoUtil.replaceNull(name).equals("") || HoUtil.replaceNull(paramName).equals("") ) {			return "";		}				ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );				return items.get(0).getName();	}	/**	 * 전체 파일 경로포함한  파일명을 조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public String [] getFileNames( String name ){		String paramName = getName(name);				if( HoUtil.replaceNull(name).equals("") || HoUtil.replaceNull(paramName).equals("") ) {			return new String[0];		}				ArrayList<FileItem> items = fileItems.get( name.toUpperCase() );				ArrayList<String> list = new ArrayList<String>();		for( int i=0; i < items.size(); i++ ) {			list.add(items.get(0).getName());		}		String [] values = new String[items.size()];		System.arraycopy(list.toArray(), 0, values, 0, list.size()); 		return values;	}			/**	 * 	 * 폴더에 파일을 생성한다.	 * @return	 */	private void writeFilesToFolder() {			ArrayList<FileItem> items = null;		ArrayList<String> fileNames = null;		ArrayList<String> fileSizes = null;		// 새로 저장된 경로 + 파일명		String writeFileName = "";		String paramName = "";		String folder = "";				Set<String> set = this.fileItems.keySet();		Iterator<String> itor = set.iterator();		String key = null;				Map<String, ArrayList<FileItem>> fileItemsRaw = new HashMap<String, ArrayList<FileItem>>();				while ( itor.hasNext() ) {			key = itor.next();						items = this.fileItems.get(key);						fileSizes = new ArrayList<String>();			boolean isFile = false;						for( FileItem item : items) {								paramName = item.getFieldName();								// Form필드 아닌 경우 파일을 저장한다.				if( !item.isFormField() ) {					isFile = true;					try {						// 폴더명..						folder = get("folder_" + paramName);					} catch (UnsupportedEncodingException e) {											}					writeFileName = writeFile(item, folder);										if( writeFiles.containsKey( paramName.toUpperCase() ) ) {  						fileNames = (ArrayList<String>) writeFiles.get( paramName.toUpperCase() );	  					} else {						fileNames = new ArrayList<String>();					}										fileNames.add( writeFileName );			    	this.writeFiles.put(paramName.toUpperCase(), fileNames );			    				    	fileSizes.add(String.valueOf(item.getSize()));				}								if( !item.isFormField() ) {			    	fileItemsRaw.put(paramName.toUpperCase() + "_RAW", items );			    						this.names.put(paramName.toUpperCase() + "_RAW" , paramName);			    	this.paramNameList.add(paramName.toUpperCase() + "_RAW");				}			}					}		fileItems.putAll(fileItemsRaw);			}		/**	 * 파일을 저장한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	private String writeFile( FileItem fileItem, String folder ) {		String writeFileName = "";				if( fileItem!=null && !fileItem.isFormField()) {			String fileName = fileItem.getName();						File file = null;			if( fileName!= null && !"".equals(fileName)) {				file = (new File(fileName));								try {					String fileNameType  = this.getHoConfig().getRenameFileNameType();					String uploadFolderType  = this.getHoConfig().getUploadFolderType();										String writeDir = this.getHoConfig().getDirFileUpload() + File.separator ;										// 파라미터로 전송된 폴더 추가..					if( HoValidator.isNotEmpty(folder)) {						writeFileName = folder + File.separator;					}					String writeFile = "";					// 폴더 미생성					if( "none".equals(uploadFolderType) ) {						// Just use "writeDir"					} 					// Random하게 폴더 생성					else if( "random".equals(uploadFolderType) ) {						writeFileName += (((int)(Math.random() * 10000000))+ File.separator);						writeDir += writeFileName;					} 					// 날짜 형식에 맞게 폴더 생성					else {						try {							writeFileName += (HoDate.getNow(uploadFolderType)+ File.separator);							writeDir +=  writeFileName;						} catch(Exception e) {							writeFileName += (HoDate.getNow("yyyyMMdd")+ File.separator);							writeDir +=  writeFileName;						}					} 					// 파일 업로드 경로 만들기..					File fileDir = new File( writeDir );										if( !fileDir.exists() ) {						fileDir.mkdirs();					}											int pos = file.getName().lastIndexOf( "." );					// 확장자..					String ext = file.getName().substring( pos );					// 원래의 파일 명 사용					if( HoValidator.isIn(fileNameType, new String[]{"none", "original"})) {						writeFile = file.getName();					} 					// 년월일시분초로파일명 사용					else if( "date".equals(fileNameType)) {						writeFile = HoDate.getNow("yyyyMMddHHmmssSSS") + ext;					} 					// Random 파일명 사용.					else {						writeFile = (((int)(Math.random() * 10000000)) + ext);					}										writeFileName += writeFile;										fileItem.write( new File( writeDir  + writeFile ));									} catch (Exception e) {					writeFileName = "Error : " + e.getMessage();					// TODO Auto-generated catch block					e.printStackTrace();				}			}		}				return writeFileName;			}}