package project.jun.was.parameter;import java.io.File;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Enumeration;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.TreeSet;import org.apache.commons.fileupload.FileItem;import project.jun.util.HoUtil;import project.jun.util.HoValidator;import project.jun.was.servlet.HoServlet;import project.jun.config.HoConfig;public class HoNormalParameter extends HoParameter {	/**	 * 생성자..	 * @param hoRrequest	 * @param hConfig	 */	public HoNormalParameter( HoServlet hoRrequest, HoConfig hConfig)	{		super(hoRrequest, hConfig);		// encode된 char-set설정.		this.characterSet = hConfig.getCharacterSet();		parseRequest();	}	/**	 * 파라미터명을 소문자로 map에 저장한다.	 */	public void parseRequest() {		Enumeration paramEnum =  getRequest().getParameterNames();		String paramName = null;		while( paramEnum.hasMoreElements() ) {			paramName = (String) paramEnum.nextElement();			this.names.put(paramName.toUpperCase(), paramName);		}	}	/**	 * request.getParameter()를 대체	 */	public String get(String name) throws UnsupportedEncodingException {		return get( name, null );	}	/**	 * request.getParameter()를 대체	 */	public String get(String name, String defaultValue) throws UnsupportedEncodingException {		String paramName = getName(name);		if( HoValidator.isEmpty(paramName) || HoValidator.isEmpty(name) ) {			// request.getParameter()값이 없을 경우 default값을 map에 저장한다.			if( HoValidator.isNull(defaultValue) ) {				if( defaultValueMap.containsKey(name.toUpperCase()) ) {					return (String) defaultValueMap.get(name.toUpperCase());				} else {					return "";				}			} else if( !defaultValue.equals("") ) {				defaultValueMap.put(name.toUpperCase(), defaultValue);			}			return defaultValue;		}		String value = "";		try {			value = getRequest().getParameter(paramName);			defaultValue = "";		} catch(Exception e) {		}		return decodeValue( value, defaultValue );	}	public FileItem getFileItem(String name) {		return null;	}	public FileItem[] getFileItems(String name) {		return null;	}	public List<String> getNamesListOrdered() {		List<String> list = new ArrayList<String>();		Enumeration paramEnum =  getRequest().getParameterNames();		String paramName = null;		while( paramEnum.hasMoreElements() ) {			paramName = (String) paramEnum.nextElement();			list.add(paramName.toUpperCase());		}		return list;	}	public String[] getValues(String name) {		return getValues(name, "");	}	public String[] getValues(String name, String defaultValue) {		String paramName = getName(name);		if( defaultValue == null ) {			defaultValue = "";		}		if( HoUtil.replaceNull(name).equals("") || HoUtil.replaceNull(paramName).equals("") ) {			return new String[0];		}		String[] arr = getRequest().getParameterValues( paramName );		if( arr == null )			return new String[0];		ArrayList list = new ArrayList();		for( int i=0; i < arr.length; i++ ) {			list.add(decodeValue( arr[i], defaultValue ));		}		String [] values = new String[arr.length];		System.arraycopy(list.toArray(), 0, values, 0, list.size());		return values;	}	public String getQueryString() {		return getRequest().getQueryString();	}	/**	 * 파라미터를 parameterNamed의 대문자를 key로한 Map형태로 변환환다.	 */	public HoParameterMap getHoParameterMap() {		return getHoParameterMap(true);	}	public HoParameterMap getHoParameterMap(boolean withSession) {		List<String> list =  getNamesList();		HoParameterMap values = new HoParameterMap();		if( withSession ) {			// 세션정보를 담는다.			values.putAll(this.hoServlet.getHoSession().getMap());		}		String paramName = null;		for( int i=0 ; i<list.size(); i++) {			paramName = (String) list.get(i);			try {				values.put(paramName.toUpperCase(), getValues(paramName));			} catch (Exception e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		return values;	}	/**	 * 금지된 스트링을 가진 파라미터명의 목록	 * @return	 * @throws UnsupportedEncodingException	 */	public List getBlockNamesList() {		ArrayList list   = new ArrayList();		String [] blocks = new String [] {"script"};		String    name   = null;		String [] values = null;		for( int i=0 ; i<getNamesList().size() ; i++ ) {			name = (String)getNamesList().get(i);			for( int j = 0 ; j < blocks.length ; j++) {				if( name.toLowerCase().indexOf(blocks[j]) > 0 ) {					list.add("NAME : " + name);				}			}			values = getValues(name);			if( values == null) {			} else if( values.length == 0) {			} else if( values.length == 1) {				for( int j = 0 ; j < blocks.length ; j++) {					if( values[0].toLowerCase().indexOf(blocks[j]) > 0 ) {						list.add("VALUE : " + values[0]);					}				}			} else {				for( int k=0; k<values.length ; k++ ) {					for( int j = 0 ; j < blocks.length ; j++) {						if( values[k].toLowerCase().indexOf(blocks[j]) > 0 ) {							list.add("VALUE : " + values[k]);						}					}				}			}		}		return list;	}	/**	 * 파일을 조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public File getFile( String name ) {		return null;	}	/**	 * 파일을 조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public File [] getFiles( String name ){		return null;	}	/**	 * 전체 파일 경로포함한 파일명을조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public String getFileName( String name ){		return null;	}	/**	 * 전체 파일 경로포함한  파일명을 조회한다.	 *  파일업로드가 아닌 경우는 null	 * @param name	 * @return	 */	public String [] getFileNames( String name ){		return null;	}}